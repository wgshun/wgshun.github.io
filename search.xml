<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Windows 10 安装 Anaconda3 & GPU版Tensorflow & Cuda9 & cudnn7]]></title>
    <url>%2F2018%2F10%2Fwindows-install-tensorflow-gpu%2F</url>
    <content type="text"><![CDATA[前言为了更好的学习工作，清理了下电脑，重做了下系统，因此需要重新装深度学习相关的运行环境。在这里记录一下安装过程，以备后用。环境：Windows 10 &amp; vs-2015 &amp; cuda9 &amp; cudnn7 &amp; anaconda3 &amp; tensorflow-gpu 安装步骤1. 安装 vs2015首先在安装 cuda 之前需要安装 vs，在这选择安装 vs2015，安装需要的 iso 文件在我的网盘里。 网盘链接：https://pan.baidu.com/s/10KQn-1yBqZ1vzkJnbzNL2A提取码：1aiq 下载完成之后，打开其中的 vs_community.exe 文件进行安装，安装期间所有的选项均默认即可。安装路径也可以单独指定。如果之前电脑里有 vs 的可以直接跳过此步骤，或者可以重新更新一下。 2. 安装 cuda9.0安装完 vs2015 之后就可以安装 cuda 了，在这里我安装的是 cuda9.0 (因为目前 tensorflow 还不支持最新的 cuda10)，cuda9.0 安装文件的下载路径：cuda9.0 安装文件，当然，如果想下载 cuda 的其他可用版本也是可以的。cuda9.0 的安装文件下载好了以后会是类似于：cuda_9.0.176_win10.exe 的一个文件，然后就是打开安装文件，一步步的按照默认的选项进行安装。使用安装文件安装完成之后，打开 cmd命令窗口 输入：1&gt; nvcc -V 就可以看到类似的以下 cuda9.0 的版本信息：1234nvcc: NVIDIA (R) Cuda compiler driverCopyright (c) 2005-2017 NVIDIA CorporationBuilt on Fri_Sep__1_21:08:32_Central_Daylight_Time_2017Cuda compilation tools, release 9.0, V9.0.176 到此，cuda9.0 算是安装完成。 3. 安装 cudnn7安装好 cuda9.0 之后，需要安装与之版本相对应的性能优化库：cudnn7，cudnn7 的下载路径：下载 cudnn7，NVIDIA要求用户登录之后才开放下载 cudnn7 的下载通道，不想登录下载的可以去我的网盘下载。 网盘链接：https://pan.baidu.com/s/1FUl4xEvt-SFeE3saso6-xw提取码：p55p这个版本的 cudnn7 是针对 cuda9.0 的 这是一个压缩包文件，下载好之后解压会出现一个 cuda 文件夹，将文件夹中的东西复制到 NVIDIA GPU Computing Toolkit 的安装路径下。路径默认会在：C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0，复制完成，cudnn 也算安装完成了。 4. 安装 anaconda3gpu 的相关软件设置安装完成，下面就是安装代码所需要的 python 环境了。Anaconda 是一个开源的 python发行版本，其中包括了许多常用的 python 第三方库，相对于传统的 python2&amp;python3 个人感觉更为方便，所以在这里 python 环境使用了 anaconda3 ，默认 python 版本是 3.6 。anaconda3 安装文件的下载路径：下载 anaconda，可能一部分网络在下载的时候会很慢，所以我也放上我的网盘链接： 链接：https://pan.baidu.com/s/15MSq0irNJ9HgVEPRftQy7A提取码：23gv 下载完成之后，打开安装文件，一步步的按照默认选项进行安装，也可以自定义安装路径。安装完成之后按下 Windows键，就能再软件列表看到安装好的 Anaconda3 的相关信息了。 5. 安装 tensorflow-gpu按下 Windows键，在 Anaconda3 的列表下找到 Anaconda Prompt ,点击就会出现 anaconda 环境下的命令行窗口，在这里使用命令1&gt; pip install tensorflow-gpu 即可安装最新版本的 tensorflow-gpu ，成功安装之后，使用以下命令进行检验：123456&gt; pythonPython 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; print(tf.__version__)1.11.0 可以成功的导入，并输出 tensorflow-gpu 的相关版本信息就算安装成功了。 问题如果在导入 tensorflow 的过程中出现下面的错误：1ImportError: DLL load failed: 找不到指定的模块 可以尝试重新安装 cuda9.0 和 cudnn7，即能解决问题。 如果在导入 tensorflow 的过程中出现下面的错误：1ModuleNotFoundError: No module named &apos;absl&apos; 可以通过执行下面命令重新安装 absl-py 库来解决问题。12&gt; pip uninstall absl-py&gt; pip install absl-py]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>cuda</tag>
        <tag>cudnn</tag>
        <tag>windows</tag>
        <tag>anaconda</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04 下 Python3 虚拟环境安装 OpenCV]]></title>
    <url>%2F2018%2F10%2Fubuntu-install-python3-opencv%2F</url>
    <content type="text"><![CDATA[前言最近在看 Light Head Rcnn 的 Tensorflow 源码，在 Python3 下需要用到 OpenCV ，鉴于我的 Ubuntu 下已经装了 Python2.7 的 OpenCV2.4.13.7 点击查看安装教程。所以这次在虚拟环境下配置一下 Python3 的 OpenCV，按照以下步骤直接装了最新的 OpenCV4.0.0-pre。 安装步骤1. 各种依赖包的安装升级一些预安装的软件包：12$ sudo apt-get update$ sudo apt-get upgrade 安装一些编译 OpenCV 所需要的开发工具：1$ sudo apt-get install build-essential cmake git pkg-config 安装一些用于从磁盘中读取各种图片格式所需要的依赖包：1$ sudo apt-get install libjpeg8-dev libtiff4-dev libjasper-dev libpng12-dev 安装一些用于从磁盘中读取视频所需要的依赖包：1$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev 安装以后使用 OpenCV 的 GUI 时所需要的 GTK：1$ sudo apt-get install libgtk2.0-dev 安装用于优化 OpenCV 内部各种功能的依赖包，例如矩阵操作：1$ sudo apt-get install libatlas-base-dev gfortran 2. 设置 Python3 的相关操作首先安装 Python 的包管理工具 pip。安装 Python3 的 pip ：12$ wget https://bootstrap.pypa.io/get-pip.py$ sudo python3 get-pip.py 注意： 在安装 pip 的时候使用的是 python3，如果不用 python3 的话，默认安装的将是 python2 的。 本文前言中说了：是在虚拟环境下安装 Python3 的 OpenCV。所以在这里搭建 Python3 的虚拟环境需要用到 virtualenv 和 virtualenvwrapper ，下面先使用 pip 安装 virtualenv 和 virtualenvwrapper 。1$ sudo pip3 install virtualenv virtualenvwrapper 注意： 在这里使用的也是 pip3 ，而不是 pip ，使用 pip3 安装确保将这两个包装在 Python3 的环境下。 下面就要更新环境变量了，在 ~/.bashrc 文件的最后添加上以下环境变量信息：1234# virtualenv and virtualenvwrapperexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3export WORKON_HOME=$HOME/.virtualenvssource /usr/local/bin/virtualenvwrapper.sh 注意一下在这里是怎么将 VIRTUALENVWRAPPER_PYTHON 指向 Python3 所在的 Ubuntu 系统路径的。 为了确保刚刚配置的环境变量有效，执行以下命令：1$ source ~/.bashrc 然后，创建下面安装 Python3 的 OpenCV 需要使用 cv 虚拟环境：1$ mkvirtualenv cv 这时可以看到终端中用户名的前面有了 (cv) 的标识。目前算是完成了 Python 设置的一半了，下面需要安装 Python3 的开发文件：1$ sudo apt-get install python3.5-dev 我这里的 Python3 的版本是 3.5 ，所以我装的是 python3.5-dev。OpenCV 还需要用到 Numpy ，下一步安装 Numpy ：1$ pip install numpy 注意： 这一步出错的朋友请移步本文开头的参考链接，那里有解决方案。 3. 安装 OpenCV到此，安装 OpenCV 所需要设置的环境都设置完毕，下面开始下载 OpenCV 的源码：1$ git clone https://github.com/Itseez/opencv.git 注意： 本文开头的参考文章中有安装 OpenCV 的 contrib库 ，目前我还用不到，所以就不占用那个空间去装了，需要的还请移步自取。 下载好源码以后就是编译了：1234$ cd opencv$ mkdir release$ cd release$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON .. cmake 命令结束以后就可以看到以下 python3 的信息了：注意： 在 cmake 以后看到 python3 的信息才能进行下面的操作。 下面开始 OpenCV 的编译操作：1$ make -j4 注意： 上述命令中的 4 根据处理器的内核数来设置，可以加快编译速度。 在编译的时候遇到错误：12fatal error: Eigen/Eigenvalues: No such file or directorycompilation terminated. 解决方法：重新 cmake ，在 cmake 的时候加入参数 -D WITH_EIGEN=OFF，然后重新编译就通过了。 在没有报错编译完成之后，可以执行下列命令将 OpenCV 装到系统里：12$ sudo make install$ sudo ldconfig 4. 设置 OpenCV 的系统链接在没有错误的情况下执行完以上步骤，执行命令：1$ ls -l /usr/local/lib/python3.5/site-packages/ 就可以看到 OpenCV 的相关信息了：在这里 OpenCV 的名字是 cv2.cpython-35m-x86_64-linux-gnu.so 。下面为了能在创建的 cv 虚拟环境中使用 OpenCV ，需要将这个 site-packages 文件夹下的 cv2.cpython-35m-x86_64-linux-gnu.so 文件链接到 cv 虚拟环境中：12$ cd ~/.virtualenvs/cv/lib/python3.5/site-packages/$ ln -s /usr/local/lib/python3.5/site-packages/cv2.cpython-35m-x86_64-linux-gnu.so cv2.so 在上述命令中将 cv2.cpython-35m-x86_64-linux-gnu.so 的名字改成了 cv2.so，这样在 Python3 中就能直接导入 cv2 了。这时候使用 ls 命令就可以看到 cv2.so 文件了。如果没有 cv2.so 文件，将不能导入 cv2 。 5. 测试 Python3 安装的 OpenCV打开终端，进入创建的 cv 虚拟环境，在 Python 中导入 cv2 查看 OpenCV 的版本：12345$ workon cv$ python&gt;&gt;&gt; import cv2&gt;&gt;&gt; cv2.__version__'4.0.0-pre' 结束，安装成功。 参考：https://www.pyimagesearch.com/2015/07/20/install-opencv-3-0-and-python-3-4-on-ubuntu/]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>python3</tag>
        <tag>opencv</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 10 安装 Desktop Ubuntu]]></title>
    <url>%2F2018%2F10%2Fwindows10-install-desktop-ubuntu%2F</url>
    <content type="text"><![CDATA[前言前一段时间在 Windows 10 上装了 Bash 的 Ubuntu ，所以就想是不是也能装 Desktop 版本的。经过一番搜索，果断找到了。下面记录下过程： 安装前提 新版本的 Windows 10（装有Windows Subsystem for Linux） 提前装了 Bash 版本的 Ubuntu 安装步骤可以参考：Windows 10 安装 Bash Ubuntu 下载 windows 下的 X-service下载地址：https://sourceforge.net/projects/vcxsrv/下载好，安装好以后，打开 XLaunch ，首次使用会弹出设置窗口，选择 One large window，设置 Display number 为 0 ，如下图下面其余的设置全部按默认走。 在 Bash 版本 Ubuntu 里下载桌面12$ sudo apt-get update$ sudo apt-get install ubuntu-desktop unity compiz-core compizconfig-settings-manager 会下载六百多M的包，解压完有两个多G。 注：在下载过程中网络要绝对的稳定，不然很容易卡着不动。卡着不动了不要惊慌，不要失措，可以选择继续等（经过一段时间有可能会再次动起来），也可以选择干掉重新来过。 配置 compiz 窗口管理器启动刚才安装的 XLaunch ，然后在 Bash 版的 Ubuntu 中执行命令：12$ export DISPLAY=localhost:0$ sudo ccsm 然后在打开的 XLaunch 界面会出现 ccsm 的配置界面，勾选 Ubuntu Unity Plugin 选项，其余的默认就行不用管。然后关闭 ccsm ，关闭的时候会弹出几个窗口全部选确定。在 Bash 版的 Ubuntu 中执行命令：1$ sudo compiz 看启动的 XLaunch 界面就会出现 Ubuntu 的 Desktop 界面了。 转载自：https://blog.csdn.net/u011138447/article/details/78262369?locationNum=4&amp;fps=1]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>desktop ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 10 安装 Bash Ubuntu]]></title>
    <url>%2F2018%2F10%2Fwindows10-install-bash-ubuntu%2F</url>
    <content type="text"><![CDATA[前言听闻微软大哥在新版本的 Windows 10 里添加了个新功能，可以直接在 Windows 10 下直接安装使用 Bash 版本的 Ubuntu 。 安装前提 新版本的 64位的Windows 10（装有Windows Subsystem for Linux） 安装 Ubuntu打开 win10 的 Windows 设置，如下图在 查找设置 输入框输入 Windows 功能 会出现 启用或关闭 Windows 功能，如下图点击进入会出现 Windows 功能窗口，勾选 适用于 Linux 的 Windows 子系统。如下图然后打开微软应用商店，如下图搜索 Ubuntu，点击安装。如下图安装完成后就可以在应用列表搜索 Ubuntu 找到安装好的 Bash 版 Ubuntu ，点击就可以开始使用了。如下图首次使用会让你设置 username 和 password 。以后使用效果如下图：完。]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>bash ubuntu</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 博客绑定个人域名]]></title>
    <url>%2F2018%2F07%2Fcustom-domain%2F</url>
    <content type="text"><![CDATA[前段时间用 hexo 搭建的 gitpage 个人博客，服务器用的是 github 的，然后域名默认也是 github 下的二级域名：username.github.io, 现在为了提升格调准备将自己的博客指向一个新的域名。下面记录下过程。 购买域名国内的域名服务商有新网，腾讯云，还有阿里云的万网等。下面以阿里云的万网为例： 在万网购买了自己心仪的域名后，进入阿里云的管理控制台-域名与网站-域名就可以看到购买的域名此时的域名状态是未实名认证的，然后就是实名认证（一般需要2小时左右）。 域名解析首先获取自己 github 的二级域名的 IP地址，windows 下直接在 cmd 里 Ping 一下自己的博客就会得到 IP 地址：下面通过 DNS域名解析将购买的域名指向 github 的二级域名：username.github.io，进入阿里云的管理控制台-域名与网站-云解析 DNS，进入域名的解析设置，点击新手指导，将得到的 IP 地址填到记录值一栏，点击确定就 OK 了。填完以后的解析列表会出现：记录值就是自己 github 的二级域名的 IP地址。 设置CNAME在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如： 在 github 上面，打开 username.github.io 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。比如： 好了，新域名配置完成，可以访问了。]]></content>
      <categories>
        <category>博客技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>绑定域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 的 Next 主题中渲染 MathJax 数学公式]]></title>
    <url>%2F2018%2F07%2Fmathjax-in-hexo%2F</url>
    <content type="text"><![CDATA[在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成Mathjax，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。 这个问题搞了好久才找到解决方案，感谢@小毛驴 原因Hexo 默认使用 ”hexo-renderer-marked” 引擎渲染网页，该引擎会把一些特殊的 markdown 符号转换为相应的 html 标签，比如在 markdown 语法中，下划线_代表斜体，会被渲染引擎处理为&lt;em&gt;标签。 因为类 Latex 格式书写的数学公式下划线_表示下标，有特殊的含义，如果被强制转换为&lt;em&gt;标签，那么 MathJax 引擎在渲染数学公式的时候就会出错。 类似的语义冲突的符号还包括*, {, }, \\等。 解决方法更换 Hexo 的 markdown 渲染引擎，hexo-renderer-kramed 引擎是在默认的渲染引擎 hexo-renderer-marked 的基础上修改了一些 bug ，两者比较接近，也比较轻量级。12$ npm uninstall hexo-renderer-marked --save$ npm install hexo-renderer-kramed --save 执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为 hexo-renderer-kramed 引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js，把第11行的 escape 变量的值做相应的修改：12//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,escape: /^\\([`*\[\]()#$+\-.!_&gt;])/, 这一步是在原基础上取消了对\\,\{,\}的转义(escape)。同时把第20行的em变量也要做相应的修改。12//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 重新启动hexo（先clean再generate）,问题完美解决。哦，如果不幸还没解决的话，看看是不是还需要在使用的主题中配置mathjax开关。 在 Next 主题中开启 MathJax 开关如何使用了主题了，别忘了在主题（Theme）中开启 MathJax 开关，下面以 next 主题为例，介绍下如何打开 MathJax 开关。 进入到主题目录，找到 _config.yml 配置问题，把 math 默认的 false 修改为true，具体如下： 1234567891011# Math Equations Render Supportmath: enable: true # Default(true) will load mathjax/katex script on demand # That is it only render those page who has 'mathjax: true' in Front Matter. # If you set it to false, it will load mathjax/katex srcipt EVERY PAGE. per_page: true engine: mathjax #engine: katex 还需要在文章的Front-matter里打开mathjax开关，如下：123456---title: index.htmldate: 2018-07-05 12:01:30tags:mathjax: true-- 之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。]]></content>
      <categories>
        <category>博客技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>machjax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04 安装 TensorRT]]></title>
    <url>%2F2018%2F06%2Fubuntu-install-tensorrt%2F</url>
    <content type="text"><![CDATA[安装步骤首先下载tar版本的安装包，下载地址需要登陆NVIDIA。安装TensorRT前需要安装Cuda和cudnn，安装步骤可以参考 ubuntu安装cuda和cudnn。打开下载的TensorRT所在路径，解压下载的tar文件：1$ tar -xzvf TensorRT-XXX.tar.gz 解压好添加环境变量：1234567$ vim ~/.bashrc # 打开环境变量文件# 将下面三个环境变量写入环境变量文件并保存export LD_LIBRARY_PATH=TensorRT解压路径/lib:$LD_LIBRARY_PATHexport CUDA_INSTALL_DIR=/usr/local/cuda-9.0export CUDNN_INSTALL_DIR=/usr/local/cuda-9.0# 使刚刚修改的环境变量文件生效$ source ~/.bashrc 下面是安装Python的TensorRT包：进到解压的TensorRT目录下的Python目录：1234# 对于python2$ sudo pip2 install tensorrt-XXX-cp27-cp27mu-linux_x86_64.whl# 对于python3$ sudo pip3 install tensorrt-XXX-cp35-cp35m-linux_x86_64.whl 如安装失败请参考文章末尾的解决方案。测试TensorRT是否安装成功，进入Python编辑器加载tensorrt：12&gt;&gt;&gt; import tensorrt&gt;&gt;&gt; tensorrt.__version__ 会输出TensorRT的版本号，即安装成功。然后转到uff目录下安装uff包：1234# 对于python2$ sudo pip2 install uff-0.1.0rc0-py2.py3-none-any.whl# 对于python3$ sudo pip3 install uff-0.1.0rc0-py2.py3-none-any.whl 测试：1$ which convert-to-uff 会输出uff的安装路径。拷贝lenet5.uff到python相关目录进行验证：123456$ sudo cp TensorRT-XXX/data/mnist/lenet5.uff TensorRT-XXX/python/data/mnist/lenet5.uff$ cd TensorRT-XXX/samples/sampleMNIST$ make clean$ make$ cd /TensorRT-XXX/bin（转到bin目录下面，make后的可执行文件在此目录下）$ ./sample_mnist 命令执行顺利即安装成功。 错误在安装Python的TensorRT包时可能出现的错误：1234In file included from src/cpp/cuda.cpp:1:0: src/cpp/cuda.hpp:14:18: fatal error: cuda.h: No such file or directory compilation terminated. error: command 'x86_64-linux-gnu-gcc' failed with exit status 1 原因显示是找不到cuda.h，根据网上分析是因为用了sudo之后环境变量用的是root的环境变量。参考 解决方案将cuda的安装路径添加到root的环境变量中，在root角色下安装Python的TensorRT包12345$ sudo vim /etc/profile.d/cuda.sh添加：export PATH=/usr/local/cuda-9.0/bin:$PATH$ sudo su -$ pip2 install tensorrt-XXX-cp27-cp27mu-linux_x86_64.whl $ exit 参考：https://blog.csdn.net/xll_bit/article/details/78376320]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>cuda</tag>
        <tag>cudnn</tag>
        <tag>tensorrt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 系统查询 cuda 和 cudnn 版本号]]></title>
    <url>%2F2018%2F06%2Fubuntu-inquire-cuda-and-cudnn-version%2F</url>
    <content type="text"><![CDATA[查询 cuda 版本号命令行输入：1$ cat /usr/local/cuda/version.txt 会输出如下信息：1&gt;&gt;&gt; CUDA Version 8.0.61 显示cuda版本号为：8.0.61 查询 cudnn 版本号命令行输入：1$ cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 会输出如下信息：123456#define CUDNN_MAJOR 7#define CUDNN_MINOR 0#define CUDNN_PATCHLEVEL 1--#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)#include &quot;driver_types.h&quot; 显示cudnn版本号为：7.0.1]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>cuda</tag>
        <tag>cudnn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04 安装 Caffe]]></title>
    <url>%2F2018%2F06%2Fubuntu-install-caffe%2F</url>
    <content type="text"><![CDATA[安装步骤首先安装各种依赖包：12$ sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev python-dev libgflags-dev libatlas-base-dev libhdf5-serial-dev protobuf-compiler$ sudo apt-get install --no-install-recommends libboost-all-dev 从github上面拷贝下来caffe项目：12$ git clone https://github.com/BVLC/caffe.git$ cd caffe 安装caffe版的SSD拷贝步骤为：123$ git clone https://github.com/weiliu89/caffe.git$ cd caffe$ git checkout ssd 然后将caffe主目录下面的Makefile.config.example拷贝更名为Makefile.config，打开操作：12$ cp Makefile.config.example Makefile.config$ gedit Makefile.config 将其中的：1234#USE_CUDNN := 1#WITH_PYTHON_LAYER := 1INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/includeLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib 分别更改为：1234USE_CUDNN := 1WITH_PYTHON_LAYER := 1INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serialLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial 打开 Makefile文件：1$ gedit Makefile 将其中的：1NVCCFLAGS += -ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS) 更改为：1NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS) 打开/usr/local/cuda/include/crt/host_config.h文件：1$ sudo gedit /usr/local/cuda/include/crt/host_config.h 将其中的：1#error-- unsupported GNU version! gcc versions later than 4.9 are not supported! 更改为：1//#error-- unsupported GNU version! gcc versions later than 4.9 are not supported! 下面就是编译caffe并测试：123$ make clean -j8$ make all -j8 $ make runtest -j8 最后输出PASS说明测试成功。配置环境变量：1$ vim ~/.bashrc 在文件末尾写入caffe-pathon的安装路径：1export PYTHONPATH=caffe安装路径/caffe/python:$PYTHONPATH 上述语句中的~表示caffe所在的根目录。是环境变量生效：1$ source ~/.bashrc 然后执行：1$ make pycaffe 常见问题CUDA9错误12345NVCC src/caffe/layers/bnll_layer.cunvcc fatal : Unsupported gpu architecture 'compute_20'Makefile:594: recipe for target '.build_release/cuda/src/caffe/layers/bnll_layer.o' failedmake: *** [.build_release/cuda/src/caffe/layers/bnll_layer.o] Error 1make: *** Waiting for unfinished jobs.... 解决方案cuda9不支持‘ compute-20 ’，需要修改Makefile.config文件中CUDA_ARCH设置，将12345678910111213# CUDA architecture setting: going with all of them.# For CUDA &lt; 6.0, comment the *_50 through *_61 lines for compatibility.# For CUDA &lt; 8.0, comment the *_60 and *_61 lines for compatibility.# For CUDA &gt;= 9.0, comment the *_20 and *_21 lines for compatibility.CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \ -gencode arch=compute_20,code=sm_21 \ -gencode arch=compute_30,code=sm_30 \ -gencode arch=compute_35,code=sm_35 \ -gencode arch=compute_50,code=sm_50 \ -gencode arch=compute_52,code=sm_52 \ -gencode arch=compute_60,code=sm_60 \ -gencode arch=compute_61,code=sm_61 \ -gencode arch=compute_61,code=compute_61 中的12-gencode arch=compute_20,code=sm_20 \-gencode arch=compute_20,code=sm_21 \ 删除即可重新编译。 HDF5错误1234src/caffe/net.cpp:8:18: fatal error: hdf5.h: No such file or directorycompilation terminated.Makefile:581: recipe for target '.build_release/src/caffe/net.o' failedmake: *** [.build_release/src/caffe/net.o] Error 1 或者1234567AR -o .build_release/lib/libcaffe.aLD -o .build_release/lib/libcaffe.so.1.0.0/usr/bin/ld: cannot find -lhdf5_hl/usr/bin/ld: cannot find -lhdf5collect2: error: ld returned 1 exit statusMakefile:572: recipe for target '.build_release/lib/libcaffe.so.1.0.0' failedmake: *** [.build_release/lib/libcaffe.so.1.0.0] Error 1 解决方案执行命令安装libhdf5-dev1$ sudo apt-get install libhdf5-dev 然后再重新编译。 gflags错误12345In file included from src/caffe/net.cpp:10:0:./include/caffe/common.hpp:5:27: fatal error: gflags/gflags.h: No such file or directorycompilation terminated.Makefile:581: recipe for target '.build_release/src/caffe/net.o' failedmake: *** [.build_release/src/caffe/net.o] Error 1 解决方案执行命令安装gflags1$ sudo apt-get install libgflags-dev 然后再重新编译。 glog错误12345In file included from src/caffe/net.cpp:10:0:./include/caffe/common.hpp:6:26: fatal error: glog/logging.h: No such file or directorycompilation terminated.Makefile:581: recipe for target '.build_release/src/caffe/net.o' failedmake: *** [.build_release/src/caffe/net.o] Error 1 解决方案执行命令安装glog1$ sudo apt-get install libgoogle-glog-dev 然后再重新编译。 LMDB错误12345In file included from src/caffe/util/db.cpp:3:0:./include/caffe/util/db_lmdb.hpp:8:18: fatal error: lmdb.h: No such file or directorycompilation terminated.Makefile:581: recipe for target '.build_release/src/caffe/util/db.o' failedmake: *** [.build_release/src/caffe/util/db.o] Error 1 解决方案执行命令安装lmdb1$ sudo apt-get install liblmdb-dev 然后再重新编译。 opencv_imgcodecs opencv_videoio错误12345/usr/bin/ld: cannot find -lopencv_imgcodecs/usr/bin/ld: cannot find -lopencv_videoiocollect2: error: ld returned 1 exit statusMakefile:579: recipe for target '.build_release/lib/libcaffe.so.1.0.0-rc5' failedmake: *** [.build_release/lib/libcaffe.so.1.0.0-rc5] Error 1 解决方案打开Makefile文件，在164行（我的文件）加上opencv_imgcodecs，如下：123LIBRARIES += glog gflags protobuf leveldb snappy \ lmdb boost_system hdf5_hl hdf5 m \ opencv_core opencv_highgui opencv_imgproc opencv_imgcodecs 然后再重新编译。 numpy路径错误1234python/caffe/_caffe.cpp:10:31: fatal error: numpy/arrayobject.h: No such file ordirectorycompilation terminated.make: *** [python/caffe/_caffe.so] Error 1` 解决方案打开python编辑器，通过命令得到numpy的安装路径：123&gt;&gt;&gt; import numpy&gt;&gt;&gt; dirs = numpy.get_include()&gt;&gt;&gt; print(dirs) 然后就能看到numpy的安装路径，打开caffe目录下的Makefile.config文件，将65行（我的文件）的路径：/usr/lib/python2.7/dist-packages/numpy/core/include换成刚刚得到numpy的安装路径，然后重新编译。]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>caffe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04 安装 cuda9 和 cudnn7]]></title>
    <url>%2F2018%2F06%2Fubuntu-install-cuda-and-cudnn%2F</url>
    <content type="text"><![CDATA[安装步骤安装 cuda首先下载 cuda9.0 下载地址的 (runfile) 安装文件，下载完成进到文件下载的目录下，给安装文件赋予权限：1$ sudo chmod 777 XXX.run # XXX为安装文件的文件名 执行安装文件：1$ sudo sh XXX.run 在看完协议选择 Install NVIDIA Accelerated Graphics Driver for nvidia 时，选择 no，其他的可全部选择 yes 和默认回车；并且在查看协议时有快捷键 Ctrl+D 进行翻页。下面安装完成配置环境变量：打开环境变量文件1$ gedit ~/.bashrc 在文件末尾加上安装的 cuda9.0 路径12export PATH=/usr/local/cuda-9.0/bin:$PATHexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64:$LD_LIBRARY_PATH 配置完环境变量，使其生效：1$ source ~/.bashrc 然后进行测试：123$ cd /usr/local/cuda-9.0/samples/1_Utilities/deviceQuery$ sudo make$ sudo ./deviceQuery 测试结果有输出PASS，即为正确安装。 安装 cudnn首先下载 cudnn7 下载路径（下载 cudnn7 需要登陆 NVIDIA ，没有 NVIDIA 账号的注册一个就行了。）下载 tgz 压缩文件。首先解压 tgz 压缩文件：1$ tar -xzvf cudnn-XXX.tgz 接着复制文件到 cuda 路径下：123$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64$ sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn* 复制完成然后使用命令，可以看到输出相应的 cuda 和 cudnn 的版本信息1$ nvcc -V 如果提示库缺失错误，可参考以下命令：1234$ sudo cp /usr/local/cuda-9.0/lib64/libcudart.so.9.0 /usr/local/lib/libcudart.so.9.0 &amp;&amp; sudo ldconfig$ sudo cp /usr/local/cuda-9.0/lib64/libcublas.so.9.0 /usr/local/lib/libcublas.so.9.0 &amp;&amp; sudo ldconfig$ sudo cp /usr/local/cuda-9.0/lib64/libcurand.so.9.0 /usr/local/lib/libcurabd.so.9.0 &amp;&amp; sudo ldconfig$ sudo cp /usr/local/cuda-9.0/lib64/libcudnn.so.7 /usr/local/lib/libcudnn.so.7 &amp;&amp; sudo ldconfig]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>cuda</tag>
        <tag>cudnn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04 安装 NVIDIA 驱动]]></title>
    <url>%2F2018%2F06%2Fubuntu-install-nvidia-drive%2F</url>
    <content type="text"><![CDATA[问题描述 在安装了NVIDIA驱动后出现了进入Ubuntu循环登录的问题。 解决方案1.进入命令行界面Ctrl+Alt+F1打开编辑配置文件：1$ vim /etc/modprobe.d/blacklist.conf 在最后一行添加：1blacklist nouveau 2.禁用 nouveau 第三方驱动，之后也不需要改回来执行：12$ sudo update-initramfs -u$ lsmod | grep nouveau 没有输出即屏蔽好了。 3.禁用X服务，执行：1$ sudo /etc/init.d/lightdm stop 4.给驱动run文件赋予执行权限1$ sudo chmod a+x NVIDIA***.run 安装(注意 参数)1$ sudo ./NVIDIA***.run –no-opengl-files 5.启用X服务，执行：1$ sudo /etc/init.d/lightdm stop 如果还无法进入桌面，这是因为驱动修改了xorg的配置，可执行一下命令：12$ cd /usr/share/X11/xorg.conf.d/ $ sudo mv nvidia-drm-outputclass.conf nvidia-drm-outputclass.conf.bak 参考http://blog.csdn.net/u012759136/article/details/53355781]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>nvidia驱动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04 python2 安装 OpenCV2.4.13.6]]></title>
    <url>%2F2018%2F06%2Fubuntu-install-opencv%2F</url>
    <content type="text"><![CDATA[事先装有 OpenCV 需要重新安装的，先执行卸载步骤，再安装。 卸载步骤1.找到当初安装 OpenCV 的 release 或 build 目录，执行以下命令1234sudo make uninstallcd ..sudo rm -r buildsudo rm -r /usr/local/include/opencv2 /usr/local/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/local/share/opencv /usr/local/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/local/bin/opencv* /usr/local/lib/libopencv* 2.删除 usr 文件夹中所有 opencv 相关项12cd /usr/find . -name "*opencv*" | xargs sudo rm -rf 3.移除 Python 相关1apt-get remove opencv-doc opencv-data python-opencv 安装步骤1.通过命令安装各种软件包123$ sudo apt-get install build-essential$ sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev$ sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev 2.进到安装路径下拷贝 OpenCV 源码1$ git clone https://github.com/opencv/opencv.git 3.选择安装的 OpenCV 版本号12$ cd opencv$ git checkout -b 2.4 origin/2.4 4.使用 Cmake 编译 OpenCV 源码123$ mkdir release$ cd release$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. 5.make 安装 OpenCV12$ make -j4$ sudo make install 安装到此结束。 测试命令进入 Python 编辑器12&gt;&gt;&gt; import cv2&gt;&gt;&gt; print(cv2.__version__) 会输出 OpenCV 的版本号。 cuda 9.0 与 opencv 版本匹配问题：Cmake 过程中会出现以下问题： 错误123CMake Error: The following variables are used in this project, but they are set to NOTFOUND.Please set them or make sure they are set and tested correctly in the CMake files:CUDA_nppi_LIBRARY (ADVANCED) 原因在cuda9里面，NVIDIA把 libnppi.so换成libnppc.so libnppial.so libnppicc.so libnppicom.so libnppidei.so libnppif.so libnppig.so libnppim.so libnppist.so libnppisu.so libnppitc.so libnpps.so 解决方案修改opencv/cmake/FindCUDA.cmake 文件，将其中的1unset(CUDA_nppi_LIBRARY CACHE) 替换为：12345678910unset(CUDA_nppial_LIBRARY CACHE)unset(CUDA_nppicc_LIBRARY CACHE)unset(CUDA_nppicom_LIBRARY CACHE)unset(CUDA_nppidei_LIBRARY CACHE)unset(CUDA_nppif_LIBRARY CACHE)unset(CUDA_nppig_LIBRARY CACHE)unset(CUDA_nppim_LIBRARY CACHE)unset(CUDA_nppist_LIBRARY CACHE)unset(CUDA_nppisu_LIBRARY CACHE)unset(CUDA_nppitc_LIBRARY CACHE) 将12find_cuda_helper_libs(nppi)set(CUDA_npp_LIBRARY"$&#123;CUDA_nppc_LIBRARY&#125;;$&#123;CUDA_nppi_LIBRARY&#125;;$&#123;CUDA_npps_LIBRARY&#125;") 替换为1234567891011find_cuda_helper_libs(nppial)find_cuda_helper_libs(nppicc)find_cuda_helper_libs(nppicom)find_cuda_helper_libs(nppidei)find_cuda_helper_libs(nppif)find_cuda_helper_libs(nppig)find_cuda_helper_libs(nppim)find_cuda_helper_libs(nppist)find_cuda_helper_libs(nppisu)find_cuda_helper_libs(nppitc)set(CUDA_npp_LIBRARY "$&#123;CUDA_nppc_LIBRARY&#125;;$&#123;CUDA_nppial_LIBRARY&#125;;$&#123;CUDA_nppicc_LIBRARY&#125;;$&#123;CUDA_nppicom_LIBRARY&#125;;$&#123;CUDA_nppidei_LIBRARY&#125;;$&#123;CUDA_nppif_LIBRARY&#125;;$&#123;CUDA_nppig_LIBRARY&#125;;$&#123;CUDA_nppim_LIBRARY&#125;;$&#123;CUDA_nppist_LIBRARY&#125;;$&#123;CUDA_nppisu_LIBRARY&#125;;$&#123;CUDA_nppitc_LIBRARY&#125;;$&#123;CUDA_npps_LIBRARY&#125;") 错误1opencv nvcc fatal : Unsupported gpu architecture 'compute_20' 原因cuda9不支持‘ compute-20 ’ 解决方案：更改 OpenCVDetectCUDA.cmake 文件，把有关 ‘ compute-20 ’ 的全删掉将1234567if(CUDA_GENERATION STREQUAL "Fermi") set(__cuda_arch_bin "3.0 3.5") elseif(CUDA_GENERATION STREQUAL "Kepler") if($&#123;CUDA_VERSION&#125; VERSION_LESS "5.0") set(__cuda_arch_bin "2.0 2.1") else() set(__cuda_arch_bin "3.0 3.5") 替换为1234567if(CUDA_GENERATION STREQUAL "Fermi") set(__cuda_arch_bin "3.0 3.5") elseif(CUDA_GENERATION STREQUAL "Kepler") if($&#123;CUDA_VERSION&#125; VERSION_LESS "5.0") set(__cuda_arch_bin "3.0") else() set(__cuda_arch_bin "3.0 3.5") 将：1234if($&#123;CUDA_VERSION&#125; VERSION_LESS "5.0") set(__cuda_arch_bin "1.1 1.2 1.3 2.0 2.1(2.0) 3.0")elseif($&#123;CUDA_VERSION&#125; VERSION_GREATER "6.5") set(__cuda_arch_bin "2.0 2.1(2.0) 3.0 3.5") 替换为：1234if($&#123;CUDA_VERSION&#125; VERSION_LESS "5.0") set(__cuda_arch_bin "1.1 1.2 1.3 2.0 2.1(2.0) 3.0")elseif($&#123;CUDA_VERSION&#125; VERSION_GREATER "6.5") set(__cuda_arch_bin "3.0 3.5") 然后 cmake 成功。 参考https://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html https://stackoverflow.com/questions/46584000/cmake-error-variables-are-set-to-notfound]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>cuda</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
</search>
