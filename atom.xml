<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心安便是归处</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wgshun.github.io/"/>
  <updated>2018-10-27T15:21:51.551Z</updated>
  <id>http://wgshun.github.io/</id>
  
  <author>
    <name>wgshun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 10 安装 Anaconda3 &amp; GPU版Tensorflow &amp; Cuda9 &amp; cudnn7</title>
    <link href="http://wgshun.github.io/2018/10/windows-install-tensorflow-gpu/"/>
    <id>http://wgshun.github.io/2018/10/windows-install-tensorflow-gpu/</id>
    <published>2018-10-27T15:19:17.000Z</published>
    <updated>2018-10-27T15:21:51.551Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>为了更好的学习工作，清理了下电脑，重做了下系统，因此需要重新装深度学习相关的运行环境。在这里记录一下安装过程，以备后用。<br>环境：Windows 10 &amp; vs-2015 &amp; cuda9 &amp; cudnn7 &amp; anaconda3 &amp; tensorflow-gpu</p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="1-安装-vs2015"><a href="#1-安装-vs2015" class="headerlink" title="1. 安装 vs2015"></a>1. 安装 vs2015</h5><p>首先在安装 cuda 之前需要安装 vs，在这选择安装 vs2015，安装需要的 iso 文件在我的网盘里。</p><blockquote><p>网盘链接：<a href="https://pan.baidu.com/s/10KQn-1yBqZ1vzkJnbzNL2A" target="_blank" rel="noopener">https://pan.baidu.com/s/10KQn-1yBqZ1vzkJnbzNL2A</a><br>提取码：1aiq</p></blockquote><p>下载完成之后，打开其中的 <code>vs_community.exe</code> 文件进行安装，安装期间所有的选项均默认即可。安装路径也可以单独指定。<br>如果之前电脑里有 vs 的可以直接跳过此步骤，或者可以重新更新一下。<br><a id="more"></a></p><h5 id="2-安装-cuda9-0"><a href="#2-安装-cuda9-0" class="headerlink" title="2. 安装 cuda9.0"></a>2. 安装 cuda9.0</h5><p>安装完 vs2015 之后就可以安装 cuda 了，在这里我安装的是 cuda9.0 (因为目前 tensorflow 还不支持最新的 cuda10)，cuda9.0 安装文件的下载路径：<a href="https://developer.nvidia.com/cuda-90-download-archive" target="_blank" rel="noopener">cuda9.0 安装文件</a>，当然，如果想下载 cuda 的其他可用版本也是可以的。<br>cuda9.0 的安装文件下载好了以后会是类似于：<code>cuda_9.0.176_win10.exe</code> 的一个文件，然后就是打开安装文件，一步步的按照默认的选项进行安装。使用安装文件安装完成之后，打开 <strong>cmd</strong>命令窗口 输入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> nvcc -V</span></span><br></pre></td></tr></table></figure></p><p>就可以看到类似的以下 cuda9.0 的版本信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2017 NVIDIA Corporation</span><br><span class="line">Built on Fri_Sep__1_21:08:32_Central_Daylight_Time_2017</span><br><span class="line">Cuda compilation tools, release 9.0, V9.0.176</span><br></pre></td></tr></table></figure></p><p>到此，cuda9.0 算是安装完成。</p><h5 id="3-安装-cudnn7"><a href="#3-安装-cudnn7" class="headerlink" title="3. 安装 cudnn7"></a>3. 安装 cudnn7</h5><p>安装好 cuda9.0 之后，需要安装与之版本相对应的性能优化库：cudnn7，cudnn7 的下载路径：<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">下载 cudnn7</a>，NVIDIA要求用户登录之后才开放下载 cudnn7 的下载通道，不想登录下载的可以去我的网盘下载。</p><blockquote><p>网盘链接：<a href="https://pan.baidu.com/s/1FUl4xEvt-SFeE3saso6-xw" target="_blank" rel="noopener">https://pan.baidu.com/s/1FUl4xEvt-SFeE3saso6-xw</a><br>提取码：p55p<br>这个版本的 cudnn7 是针对 cuda9.0 的</p></blockquote><p>这是一个压缩包文件，下载好之后解压会出现一个 <code>cuda</code> 文件夹，将文件夹中的东西复制到 <strong>NVIDIA GPU Computing Toolkit</strong> 的安装路径下。路径默认会在：<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0</code>，复制完成，cudnn 也算安装完成了。</p><h5 id="4-安装-anaconda3"><a href="#4-安装-anaconda3" class="headerlink" title="4. 安装 anaconda3"></a>4. 安装 anaconda3</h5><p>gpu 的相关软件设置安装完成，下面就是安装代码所需要的 python 环境了。<br>Anaconda 是一个开源的 python发行版本，其中包括了许多常用的 python 第三方库，相对于传统的 python2&amp;python3 个人感觉更为方便，所以在这里 python 环境使用了 anaconda3 ，默认 python 版本是 3.6 。anaconda3 安装文件的下载路径：<a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">下载 anaconda</a>，可能一部分网络在下载的时候会很慢，所以我也放上我的网盘链接：</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/15MSq0irNJ9HgVEPRftQy7A" target="_blank" rel="noopener">https://pan.baidu.com/s/15MSq0irNJ9HgVEPRftQy7A</a><br>提取码：23gv</p></blockquote><p>下载完成之后，打开安装文件，一步步的按照默认选项进行安装，也可以自定义安装路径。<br>安装完成之后按下 <code>Windows键</code>，就能再软件列表看到安装好的 Anaconda3 的相关信息了。</p><h5 id="5-安装-tensorflow-gpu"><a href="#5-安装-tensorflow-gpu" class="headerlink" title="5. 安装 tensorflow-gpu"></a>5. 安装 tensorflow-gpu</h5><p>按下 <code>Windows键</code>，在 Anaconda3 的列表下找到 <code>Anaconda Prompt</code> ,点击就会出现 anaconda 环境下的命令行窗口，在这里使用命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install tensorflow-gpu</span></span><br></pre></td></tr></table></figure></p><p>即可安装最新版本的 tensorflow-gpu ，成功安装之后，使用以下命令进行检验：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> python</span></span><br><span class="line">Python 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)] on win32</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import tensorflow as tf</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(tf.__version__)</span></span><br><span class="line">1.11.0</span><br></pre></td></tr></table></figure></p><p>可以成功的导入，并输出 tensorflow-gpu 的相关版本信息就算安装成功了。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果在导入 tensorflow 的过程中出现下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: DLL load failed: 找不到指定的模块</span><br></pre></td></tr></table></figure></p><p>可以尝试重新安装 cuda9.0 和 cudnn7，即能解决问题。</p><p>如果在导入 tensorflow 的过程中出现下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ModuleNotFoundError: No module named &apos;absl&apos;</span><br></pre></td></tr></table></figure></p><p>可以通过执行下面命令重新安装 absl-py 库来解决问题。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pip uninstall absl-py</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install absl-py</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;为了更好的学习工作，清理了下电脑，重做了下系统，因此需要重新装深度学习相关的运行环境。在这里记录一下安装过程，以备后用。&lt;br&gt;环境：Windows 10 &amp;amp; vs-2015 &amp;amp; cuda9 &amp;amp; cudnn7 &amp;amp; anaconda3 &amp;amp; tensorflow-gpu&lt;/p&gt;
&lt;h4 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h4&gt;&lt;h5 id=&quot;1-安装-vs2015&quot;&gt;&lt;a href=&quot;#1-安装-vs2015&quot; class=&quot;headerlink&quot; title=&quot;1. 安装 vs2015&quot;&gt;&lt;/a&gt;1. 安装 vs2015&lt;/h5&gt;&lt;p&gt;首先在安装 cuda 之前需要安装 vs，在这选择安装 vs2015，安装需要的 iso 文件在我的网盘里。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网盘链接：&lt;a href=&quot;https://pan.baidu.com/s/10KQn-1yBqZ1vzkJnbzNL2A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/10KQn-1yBqZ1vzkJnbzNL2A&lt;/a&gt;&lt;br&gt;提取码：1aiq&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载完成之后，打开其中的 &lt;code&gt;vs_community.exe&lt;/code&gt; 文件进行安装，安装期间所有的选项均默认即可。安装路径也可以单独指定。&lt;br&gt;如果之前电脑里有 vs 的可以直接跳过此步骤，或者可以重新更新一下。&lt;br&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="cuda" scheme="http://wgshun.github.io/tags/cuda/"/>
    
      <category term="cudnn" scheme="http://wgshun.github.io/tags/cudnn/"/>
    
      <category term="windows" scheme="http://wgshun.github.io/tags/windows/"/>
    
      <category term="anaconda" scheme="http://wgshun.github.io/tags/anaconda/"/>
    
      <category term="tensorflow" scheme="http://wgshun.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 下 Python3 虚拟环境安装 OpenCV</title>
    <link href="http://wgshun.github.io/2018/10/ubuntu-install-python3-opencv/"/>
    <id>http://wgshun.github.io/2018/10/ubuntu-install-python3-opencv/</id>
    <published>2018-10-25T13:51:41.000Z</published>
    <updated>2018-10-25T14:04:33.999Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近在看 Light Head Rcnn 的 Tensorflow 源码，在 Python3 下需要用到 OpenCV ，鉴于我的 Ubuntu 下已经装了 Python2.7 的 OpenCV2.4.13.7 <a href="https://wgshun.top/2018/06/ubuntu-install-opencv/" target="_blank" rel="noopener">点击查看安装教程</a>。所以这次在虚拟环境下配置一下 Python3 的 OpenCV，按照以下步骤直接装了最新的 OpenCV4.0.0-pre。</p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="1-各种依赖包的安装"><a href="#1-各种依赖包的安装" class="headerlink" title="1. 各种依赖包的安装"></a>1. 各种依赖包的安装</h5><p>升级一些预安装的软件包：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get upgrade</span></span><br></pre></td></tr></table></figure></p><p>安装一些编译 OpenCV 所需要的开发工具：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install build-essential cmake git pkg-config</span></span><br></pre></td></tr></table></figure></p><p>安装一些用于从磁盘中读取各种图片格式所需要的依赖包：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libjpeg8-dev libtiff4-dev libjasper-dev libpng12-dev</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>安装一些用于从磁盘中读取视频所需要的依赖包：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev</span></span><br></pre></td></tr></table></figure></p><p>安装以后使用 OpenCV 的 GUI 时所需要的 GTK：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libgtk2.0-dev</span></span><br></pre></td></tr></table></figure></p><p>安装用于优化 OpenCV 内部各种功能的依赖包，例如矩阵操作：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libatlas-base-dev gfortran</span></span><br></pre></td></tr></table></figure></p><h5 id="2-设置-Python3-的相关操作"><a href="#2-设置-Python3-的相关操作" class="headerlink" title="2. 设置 Python3 的相关操作"></a>2. 设置 Python3 的相关操作</h5><p>首先安装 Python 的包管理工具 <code>pip</code>。安装 Python3 的 <code>pip</code> ：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://bootstrap.pypa.io/get-pip.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo python3 get-pip.py</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> 在安装 <code>pip</code> 的时候使用的是 python3，如果不用 python3 的话，默认安装的将是 python2 的。</p><p>本文前言中说了：是在虚拟环境下安装 Python3 的 OpenCV。所以在这里搭建 Python3 的虚拟环境需要用到 <strong>virtualenv</strong> 和 <strong>virtualenvwrapper</strong> ，下面先使用 <code>pip</code> 安装 <strong>virtualenv</strong> 和 <strong>virtualenvwrapper</strong> 。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install virtualenv virtualenvwrapper</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> 在这里使用的也是 <code>pip3</code> ，而不是 <code>pip</code> ，使用 <code>pip3</code> 安装确保将这两个包装在 Python3 的环境下。</p><p>下面就要更新环境变量了，在 <code>~/.bashrc</code> 文件的最后添加上以下环境变量信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># virtualenv and virtualenvwrapper</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></p><p><strong>注意一下</strong>在这里是怎么将 <code>VIRTUALENVWRAPPER_PYTHON</code> 指向 Python3 所在的 Ubuntu 系统路径的。</p><p>为了确保刚刚配置的环境变量有效，执行以下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure></p><p>然后，创建下面安装 Python3 的 OpenCV 需要使用 <strong>cv</strong> 虚拟环境：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkvirtualenv cv</span></span><br></pre></td></tr></table></figure></p><p>这时可以看到终端中用户名的前面有了 <strong>(cv)</strong> 的标识。目前算是完成了 Python 设置的一半了，下面需要安装 Python3 的开发文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install python3.5-dev</span></span><br></pre></td></tr></table></figure></p><p>我这里的 Python3 的版本是 3.5 ，所以我装的是 <code>python3.5-dev</code>。<br>OpenCV 还需要用到 Numpy ，下一步安装 Numpy ：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install numpy</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> 这一步出错的朋友请移步本文开头的参考链接，那里有解决方案。</p><h5 id="3-安装-OpenCV"><a href="#3-安装-OpenCV" class="headerlink" title="3. 安装 OpenCV"></a>3. 安装 OpenCV</h5><p>到此，安装 OpenCV 所需要设置的环境都设置完毕，下面开始下载 OpenCV 的源码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/Itseez/opencv.git</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> 本文开头的参考文章中有安装 OpenCV 的 contrib库 ，目前我还用不到，所以就不占用那个空间去装了，需要的还请移步自取。</p><p>下载好源码以后就是编译了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> opencv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir release</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> release</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON ..</span></span><br></pre></td></tr></table></figure></p><p>cmake 命令结束以后就可以看到以下 python3 的信息了：<br><img src="/2018/10/ubuntu-install-python3-opencv/1.png"><br><strong>注意：</strong> 在 cmake 以后看到 python3 的信息才能进行下面的操作。</p><p>下面开始 OpenCV 的编译操作：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make -j4</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> 上述命令中的 <strong>4</strong> 根据处理器的内核数来设置，可以加快编译速度。</p><p>在编译的时候遇到错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal error: Eigen/Eigenvalues: No such file or directory</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure></p><p>解决方法：<br>重新 cmake ，在 cmake 的时候加入参数 <code>-D WITH_EIGEN=OFF</code>，然后重新编译就通过了。</p><p>在没有报错编译完成之后，可以执行下列命令将 OpenCV 装到系统里：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></span><br></pre></td></tr></table></figure></p><h5 id="4-设置-OpenCV-的系统链接"><a href="#4-设置-OpenCV-的系统链接" class="headerlink" title="4. 设置 OpenCV 的系统链接"></a>4. 设置 OpenCV 的系统链接</h5><p>在没有错误的情况下执行完以上步骤，执行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -l /usr/<span class="built_in">local</span>/lib/python3.5/site-packages/</span></span><br></pre></td></tr></table></figure></p><p>就可以看到 OpenCV 的相关信息了：<br><img src="/2018/10/ubuntu-install-python3-opencv/2.png"><br>在这里 OpenCV 的名字是 <code>cv2.cpython-35m-x86_64-linux-gnu.so</code> 。<br>下面为了能在创建的 <strong>cv</strong> 虚拟环境中使用 OpenCV ，需要将这个 <code>site-packages</code> 文件夹下的 <code>cv2.cpython-35m-x86_64-linux-gnu.so</code> 文件链接到 <strong>cv</strong> 虚拟环境中：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.virtualenvs/cv/lib/python3.5/site-packages/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/lib/python3.5/site-packages/cv2.cpython-35m-x86_64-linux-gnu.so cv2.so</span></span><br></pre></td></tr></table></figure></p><p>在上述命令中将 <code>cv2.cpython-35m-x86_64-linux-gnu.so</code> 的名字改成了 <code>cv2.so</code>，这样在 Python3 中就能直接导入 <strong>cv2</strong> 了。这时候使用 <code>ls</code> 命令就可以看到  <code>cv2.so</code> 文件了。<br>如果没有  <code>cv2.so</code> 文件，将不能导入 <strong>cv2</strong> 。</p><h5 id="5-测试-Python3-安装的-OpenCV"><a href="#5-测试-Python3-安装的-OpenCV" class="headerlink" title="5. 测试 Python3 安装的 OpenCV"></a>5. 测试 Python3 安装的 OpenCV</h5><p>打开终端，进入创建的 <strong>cv</strong> 虚拟环境，在 Python 中导入 cv2 查看 OpenCV 的版本：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> workon cv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import cv2</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; cv2.__version__</span></span><br><span class="line">'4.0.0-pre'</span><br></pre></td></tr></table></figure></p><p>结束，安装成功。</p><p>参考：<a href="https://www.pyimagesearch.com/2015/07/20/install-opencv-3-0-and-python-3-4-on-ubuntu/" target="_blank" rel="noopener">https://www.pyimagesearch.com/2015/07/20/install-opencv-3-0-and-python-3-4-on-ubuntu/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;最近在看 Light Head Rcnn 的 Tensorflow 源码，在 Python3 下需要用到 OpenCV ，鉴于我的 Ubuntu 下已经装了 Python2.7 的 OpenCV2.4.13.7 &lt;a href=&quot;https://wgshun.top/2018/06/ubuntu-install-opencv/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看安装教程&lt;/a&gt;。所以这次在虚拟环境下配置一下 Python3 的 OpenCV，按照以下步骤直接装了最新的 OpenCV4.0.0-pre。&lt;/p&gt;
&lt;h4 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h4&gt;&lt;h5 id=&quot;1-各种依赖包的安装&quot;&gt;&lt;a href=&quot;#1-各种依赖包的安装&quot; class=&quot;headerlink&quot; title=&quot;1. 各种依赖包的安装&quot;&gt;&lt;/a&gt;1. 各种依赖包的安装&lt;/h5&gt;&lt;p&gt;升级一些预安装的软件包：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo apt-get update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo apt-get upgrade&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装一些编译 OpenCV 所需要的开发工具：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo apt-get install build-essential cmake git pkg-config&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装一些用于从磁盘中读取各种图片格式所需要的依赖包：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo apt-get install libjpeg8-dev libtiff4-dev libjasper-dev libpng12-dev&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="ubuntu" scheme="http://wgshun.github.io/tags/ubuntu/"/>
    
      <category term="python3" scheme="http://wgshun.github.io/tags/python3/"/>
    
      <category term="opencv" scheme="http://wgshun.github.io/tags/opencv/"/>
    
      <category term="linux" scheme="http://wgshun.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 安装 Desktop Ubuntu</title>
    <link href="http://wgshun.github.io/2018/10/windows10-install-desktop-ubuntu/"/>
    <id>http://wgshun.github.io/2018/10/windows10-install-desktop-ubuntu/</id>
    <published>2018-10-15T10:06:01.000Z</published>
    <updated>2018-10-25T13:50:48.749Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>前一段时间在 <strong>Windows 10</strong> 上装了 <strong>Bash</strong> 的 <strong>Ubuntu</strong> ，所以就想是不是也能装 <strong>Desktop</strong> 版本的。经过一番搜索，果断找到了。下面记录下过程：</p><h5 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h5><ul><li>新版本的 Windows 10（装有Windows Subsystem for Linux）</li><li>提前装了 Bash 版本的 Ubuntu 安装步骤可以参考：<a href="https://wgshun.top/2018/10/windows10-install-bash-ubuntu/" target="_blank" rel="noopener">Windows 10 安装 Bash Ubuntu</a></li></ul><h5 id="下载-windows-下的-X-service"><a href="#下载-windows-下的-X-service" class="headerlink" title="下载 windows 下的 X-service"></a>下载 windows 下的 X-service</h5><p>下载地址：<a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="noopener">https://sourceforge.net/projects/vcxsrv/</a><br><a id="more"></a><br>下载好，安装好以后，打开 <strong>XLaunch</strong> ，首次使用会弹出设置窗口，选择 <strong>One large window</strong>，设置 <strong>Display number</strong> 为 0 ，如下图<br><img src="/2018/10/windows10-install-desktop-ubuntu/desktop1.png"><br>下面其余的设置全部按默认走。</p><h5 id="在-Bash-版本-Ubuntu-里下载桌面"><a href="#在-Bash-版本-Ubuntu-里下载桌面" class="headerlink" title="在 Bash 版本 Ubuntu 里下载桌面"></a>在 Bash 版本 Ubuntu 里下载桌面</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ubuntu-desktop unity compiz-core compizconfig-settings-manager</span></span><br></pre></td></tr></table></figure><p>会下载六百多M的包，解压完有两个多G。</p><p><strong>注：</strong>在下载过程中网络要绝对的稳定，不然很容易卡着不动。卡着不动了不要惊慌，不要失措，可以选择继续等（经过一段时间有可能会再次动起来），也可以选择干掉重新来过。</p><h5 id="配置-compiz-窗口管理器"><a href="#配置-compiz-窗口管理器" class="headerlink" title="配置 compiz 窗口管理器"></a>配置 compiz 窗口管理器</h5><p>启动刚才安装的 <strong>XLaunch</strong> ，然后在 Bash 版的 Ubuntu 中执行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> DISPLAY=localhost:0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ccsm</span></span><br></pre></td></tr></table></figure></p><p>然后在打开的  <strong>XLaunch</strong> 界面会出现 <strong>ccsm</strong> 的配置界面，勾选 <strong>Ubuntu Unity Plugin</strong> 选项，其余的默认就行不用管。然后关闭 <strong>ccsm</strong> ，关闭的时候会弹出几个窗口全部选确定。在 Bash 版的 Ubuntu 中执行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo compiz</span></span><br></pre></td></tr></table></figure></p><p>看启动的  <strong>XLaunch</strong> 界面就会出现 <strong>Ubuntu</strong> 的 Desktop 界面了。</p><p>转载自：<a href="https://blog.csdn.net/u011138447/article/details/78262369?locationNum=4&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/u011138447/article/details/78262369?locationNum=4&amp;fps=1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;前一段时间在 &lt;strong&gt;Windows 10&lt;/strong&gt; 上装了 &lt;strong&gt;Bash&lt;/strong&gt; 的 &lt;strong&gt;Ubuntu&lt;/strong&gt; ，所以就想是不是也能装 &lt;strong&gt;Desktop&lt;/strong&gt; 版本的。经过一番搜索，果断找到了。下面记录下过程：&lt;/p&gt;
&lt;h5 id=&quot;安装前提&quot;&gt;&lt;a href=&quot;#安装前提&quot; class=&quot;headerlink&quot; title=&quot;安装前提&quot;&gt;&lt;/a&gt;安装前提&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;新版本的 Windows 10（装有Windows Subsystem for Linux）&lt;/li&gt;
&lt;li&gt;提前装了 Bash 版本的 Ubuntu 安装步骤可以参考：&lt;a href=&quot;https://wgshun.top/2018/10/windows10-install-bash-ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows 10 安装 Bash Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;下载-windows-下的-X-service&quot;&gt;&lt;a href=&quot;#下载-windows-下的-X-service&quot; class=&quot;headerlink&quot; title=&quot;下载 windows 下的 X-service&quot;&gt;&lt;/a&gt;下载 windows 下的 X-service&lt;/h5&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://sourceforge.net/projects/vcxsrv/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sourceforge.net/projects/vcxsrv/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Windows" scheme="http://wgshun.github.io/tags/Windows/"/>
    
      <category term="desktop ubuntu" scheme="http://wgshun.github.io/tags/desktop-ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 安装 Bash Ubuntu</title>
    <link href="http://wgshun.github.io/2018/10/windows10-install-bash-ubuntu/"/>
    <id>http://wgshun.github.io/2018/10/windows10-install-bash-ubuntu/</id>
    <published>2018-10-15T09:59:11.000Z</published>
    <updated>2018-10-25T13:39:40.405Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>听闻微软大哥在新版本的 <strong>Windows 10</strong> 里添加了个新功能，可以直接在  <strong>Windows 10</strong> 下直接安装使用 Bash 版本的 <strong>Ubuntu</strong> 。</p><h5 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h5><ul><li>新版本的 64位的Windows 10（装有Windows Subsystem for Linux）</li></ul><h5 id="安装-Ubuntu"><a href="#安装-Ubuntu" class="headerlink" title="安装 Ubuntu"></a>安装 Ubuntu</h5><p>打开 win10 的 Windows 设置，如下图<br><a id="more"></a><br><img src="/2018/10/windows10-install-bash-ubuntu/bash1.png"><br>在 <code>查找设置</code> 输入框输入 <strong>Windows 功能</strong> 会出现 <code>启用或关闭 Windows 功能</code>，如下图<br><img src="/2018/10/windows10-install-bash-ubuntu/bash2.png"><br>点击进入会出现 Windows 功能窗口，勾选 <code>适用于 Linux 的 Windows 子系统</code>。如下图<br><img src="/2018/10/windows10-install-bash-ubuntu/bash3.png"><br>然后打开微软应用商店，如下图<br><img src="/2018/10/windows10-install-bash-ubuntu/bash4.png"><br>搜索 <strong>Ubuntu</strong>，点击安装。如下图<br><img src="/2018/10/windows10-install-bash-ubuntu/bash5.png"><br>安装完成后就可以在应用列表搜索 <strong>Ubuntu</strong> 找到安装好的 Bash 版 <strong>Ubuntu</strong> ，点击就可以开始使用了。如下图<br><img src="/2018/10/windows10-install-bash-ubuntu/bash6.png"><br>首次使用会让你设置 <code>username</code> 和 <code>password</code> 。以后使用效果如下图：<br><img src="/2018/10/windows10-install-bash-ubuntu/bash7.png"><br>完。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;听闻微软大哥在新版本的 &lt;strong&gt;Windows 10&lt;/strong&gt; 里添加了个新功能，可以直接在  &lt;strong&gt;Windows 10&lt;/strong&gt; 下直接安装使用 Bash 版本的 &lt;strong&gt;Ubuntu&lt;/strong&gt; 。&lt;/p&gt;
&lt;h5 id=&quot;安装前提&quot;&gt;&lt;a href=&quot;#安装前提&quot; class=&quot;headerlink&quot; title=&quot;安装前提&quot;&gt;&lt;/a&gt;安装前提&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;新版本的 64位的Windows 10（装有Windows Subsystem for Linux）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;安装-Ubuntu&quot;&gt;&lt;a href=&quot;#安装-Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;安装 Ubuntu&quot;&gt;&lt;/a&gt;安装 Ubuntu&lt;/h5&gt;&lt;p&gt;打开 win10 的 Windows 设置，如下图&lt;br&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="bash ubuntu" scheme="http://wgshun.github.io/tags/bash-ubuntu/"/>
    
      <category term="Windows" scheme="http://wgshun.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客绑定个人域名</title>
    <link href="http://wgshun.github.io/2018/07/custom-domain/"/>
    <id>http://wgshun.github.io/2018/07/custom-domain/</id>
    <published>2018-07-05T06:43:04.000Z</published>
    <updated>2018-07-05T10:24:46.567Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间用 hexo 搭建的 gitpage 个人博客，服务器用的是 github 的，然后域名默认也是 github 下的二级域名：<code>username.github.io</code>, 现在为了提升格调准备将自己的博客指向一个新的域名。下面记录下过程。</p><h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>国内的域名服务商有<a href="http://www.xinnet.com/domain/domain.html" target="_blank" rel="noopener">新网</a>，<a href="https://dnspod.cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a>，还有阿里云的<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>等。下面以阿里云的万网为例：</p><p>在万网购买了自己心仪的域名后，进入阿里云的<code>管理控制台</code>-<code>域名与网站</code>-<code>域名</code>就可以看到购买的域名此时的域名状态是未实名认证的，然后就是实名认证（一般需要2小时左右）。</p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>首先获取自己 github 的二级域名的 IP地址，windows 下直接在 cmd 里 Ping 一下自己的博客就会得到 IP 地址：<br><a id="more"></a><br><img src="/2018/07/custom-domain/Customdomain1.jpg"><br>下面通过 DNS域名解析将购买的域名指向 github 的二级域名：<code>username.github.io</code>，进入阿里云的<code>管理控制台</code>-<code>域名与网站</code>-<code>云解析 DNS</code>，进入域名的解析设置，点击新手指导，将得到的 IP 地址填到记录值一栏，点击确定就 OK 了。填完以后的解析列表会出现：<br><img src="/2018/07/custom-domain/Customdomain2.jpg"><br>记录值就是自己 github 的二级域名的 IP地址。</p><h4 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h4><p>在 hexo 项目下，<code>source</code> 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：<br><img src="/2018/07/custom-domain/Customdomain3.jpg"></p><p>在 github 上面，打开 username.github.io 项目的（Settings）设置，然后在 <code>GitHub Pages</code>的 <code>Custom domain</code>设置里填上购买的域名。比如：<br><img src="/2018/07/custom-domain/Customdomain4.jpg"></p><p>好了，新域名配置完成，可以访问了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间用 hexo 搭建的 gitpage 个人博客，服务器用的是 github 的，然后域名默认也是 github 下的二级域名：&lt;code&gt;username.github.io&lt;/code&gt;, 现在为了提升格调准备将自己的博客指向一个新的域名。下面记录下过程。&lt;/p&gt;
&lt;h4 id=&quot;购买域名&quot;&gt;&lt;a href=&quot;#购买域名&quot; class=&quot;headerlink&quot; title=&quot;购买域名&quot;&gt;&lt;/a&gt;购买域名&lt;/h4&gt;&lt;p&gt;国内的域名服务商有&lt;a href=&quot;http://www.xinnet.com/domain/domain.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;新网&lt;/a&gt;，&lt;a href=&quot;https://dnspod.cloud.tencent.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;腾讯云&lt;/a&gt;，还有阿里云的&lt;a href=&quot;https://wanwang.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;万网&lt;/a&gt;等。下面以阿里云的万网为例：&lt;/p&gt;
&lt;p&gt;在万网购买了自己心仪的域名后，进入阿里云的&lt;code&gt;管理控制台&lt;/code&gt;-&lt;code&gt;域名与网站&lt;/code&gt;-&lt;code&gt;域名&lt;/code&gt;就可以看到购买的域名此时的域名状态是未实名认证的，然后就是实名认证（一般需要2小时左右）。&lt;/p&gt;
&lt;h4 id=&quot;域名解析&quot;&gt;&lt;a href=&quot;#域名解析&quot; class=&quot;headerlink&quot; title=&quot;域名解析&quot;&gt;&lt;/a&gt;域名解析&lt;/h4&gt;&lt;p&gt;首先获取自己 github 的二级域名的 IP地址，windows 下直接在 cmd 里 Ping 一下自己的博客就会得到 IP 地址：&lt;br&gt;
    
    </summary>
    
      <category term="博客技术" scheme="http://wgshun.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://wgshun.github.io/tags/hexo/"/>
    
      <category term="绑定域名" scheme="http://wgshun.github.io/tags/%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 的 Next 主题中渲染 MathJax 数学公式</title>
    <link href="http://wgshun.github.io/2018/07/mathjax-in-hexo/"/>
    <id>http://wgshun.github.io/2018/07/mathjax-in-hexo/</id>
    <published>2018-07-05T03:32:22.000Z</published>
    <updated>2018-10-25T13:13:27.886Z</updated>
    
    <content type="html"><![CDATA[<p>在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成Mathjax，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。</p><p>这个问题搞了好久才找到解决方案，感谢@<a href="http://xudongyang.coding.me/math-in-hexo/" target="_blank" rel="noopener">小毛驴</a></p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>Hexo 默认使用 ”hexo-renderer-marked” 引擎渲染网页，该引擎会把一些特殊的 markdown 符号转换为相应的 html 标签，比如在 markdown 语法中，下划线<code>_</code>代表斜体，会被渲染引擎处理为<code>&lt;em&gt;</code>标签。</p><p>因为类 Latex 格式书写的数学公式下划线<code>_</code>表示下标，有特殊的含义，如果被强制转换为<code>&lt;em&gt;</code>标签，那么 MathJax 引擎在渲染数学公式的时候就会出错。</p><p>类似的语义冲突的符号还包括<code>*</code>, <code>{</code>, <code>}</code>, <code>\\</code>等。<br><a id="more"></a></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>更换 Hexo 的 markdown 渲染引擎，hexo-renderer-kramed 引擎是在默认的渲染引擎 hexo-renderer-marked 的基础上修改了一些 bug ，两者比较接近，也比较轻量级。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm uninstall hexo-renderer-marked --save</span><br><span class="line"><span class="meta">$</span> npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p><p>执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。<br>然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为 hexo-renderer-kramed 引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js，把第11行的 escape 变量的值做相应的修改：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//escape: /^\\([<span class="string">\\`*&#123;&#125;\[\</span>](<span class="link"></span>)#$+\-.!_&gt;])/,</span><br><span class="line">escape: /^\\([<span class="string">`*\[\</span>](<span class="link"></span>)#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure></p><p>这一步是在原基础上取消了对\\,\{,\}的转义(escape)。<br>同时把第20行的em变量也要做相应的修改。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//em: /^\b<span class="emphasis">_((?:_</span><span class="emphasis">_|[\s\S])+?)_</span>\b|^\<span class="emphasis">*((?:\*</span>\<span class="emphasis">*|[\s\S])+?)\*</span>(?!\*)/,</span><br><span class="line">em: /^\<span class="emphasis">*((?:\*</span>\<span class="emphasis">*|[\s\S])+?)\*</span>(?!\*)/,</span><br></pre></td></tr></table></figure></p><p>重新启动hexo（先clean再generate）,问题完美解决。哦，如果不幸还没解决的话，看看是不是还需要在使用的主题中配置mathjax开关。</p><h5 id="在-Next-主题中开启-MathJax-开关"><a href="#在-Next-主题中开启-MathJax-开关" class="headerlink" title="在 Next 主题中开启 MathJax 开关"></a>在 Next 主题中开启 MathJax 开关</h5><p>如何使用了主题了，别忘了在主题（Theme）中开启 MathJax 开关，下面以 next 主题为例，介绍下如何打开 MathJax 开关。</p><p>进入到主题目录，找到 _config.yml 配置问题，把 math 默认的 false 修改为true，具体如下： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Math Equations Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default(true) will load mathjax/katex script on demand</span></span><br><span class="line">  <span class="comment"># That is it only render those page who has 'mathjax: true' in Front Matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax/katex srcipt EVERY PAGE.</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  engine:</span> <span class="string">mathjax</span></span><br><span class="line">  <span class="comment">#engine: katex</span></span><br></pre></td></tr></table></figure><p>还需要在文章的Front-matter里打开mathjax开关，如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">index.html</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-07</span><span class="bullet">-05</span> <span class="number">12</span><span class="string">:01:30</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-</span></span><br></pre></td></tr></table></figure></p><p>之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成Mathjax，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。&lt;/p&gt;
&lt;p&gt;这个问题搞了好久才找到解决方案，感谢@&lt;a href=&quot;http://xudongyang.coding.me/math-in-hexo/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小毛驴&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h4&gt;&lt;p&gt;Hexo 默认使用 ”hexo-renderer-marked” 引擎渲染网页，该引擎会把一些特殊的 markdown 符号转换为相应的 html 标签，比如在 markdown 语法中，下划线&lt;code&gt;_&lt;/code&gt;代表斜体，会被渲染引擎处理为&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;标签。&lt;/p&gt;
&lt;p&gt;因为类 Latex 格式书写的数学公式下划线&lt;code&gt;_&lt;/code&gt;表示下标，有特殊的含义，如果被强制转换为&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;标签，那么 MathJax 引擎在渲染数学公式的时候就会出错。&lt;/p&gt;
&lt;p&gt;类似的语义冲突的符号还包括&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt;等。&lt;br&gt;
    
    </summary>
    
      <category term="博客技术" scheme="http://wgshun.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://wgshun.github.io/tags/hexo/"/>
    
      <category term="machjax" scheme="http://wgshun.github.io/tags/machjax/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 安装 TensorRT</title>
    <link href="http://wgshun.github.io/2018/06/ubuntu-install-tensorrt/"/>
    <id>http://wgshun.github.io/2018/06/ubuntu-install-tensorrt/</id>
    <published>2018-06-07T03:43:59.000Z</published>
    <updated>2018-12-12T19:04:37.327Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>首先下载<code>tar</code>版本的安装包，<a href="https://developer.nvidia.com/tensorrt" target="_blank" rel="noopener">下载地址</a>需要登陆<code>NVIDIA</code>。<br>安装<code>TensorRT</code>前需要安装<code>Cuda</code>和<code>cudnn</code>，安装步骤可以参考<a href="https://http://www.wgshun.top/2018/06/ubuntu-install-cuda-and-cudnn/" target="_blank" rel="noopener"> ubuntu安装cuda和cudnn</a>。<br>打开下载的<code>TensorRT</code>所在路径，解压下载的<code>tar</code>文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xzvf TensorRT-XXX.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压好添加环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bashrc <span class="comment"># 打开环境变量文件</span></span><br><span class="line"><span class="comment"># 将下面三个环境变量写入环境变量文件并保存</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=TensorRT解压路径/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> CUDA_INSTALL_DIR=/usr/<span class="built_in">local</span>/cuda-9.0</span><br><span class="line"><span class="built_in">export</span> CUDNN_INSTALL_DIR=/usr/<span class="built_in">local</span>/cuda-9.0</span><br><span class="line"><span class="comment"># 使刚刚修改的环境变量文件生效</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>下面是安装<code>Python</code>的<code>TensorRT</code>包：<br>进到解压的<code>TensorRT</code>目录下的<code>Python</code>目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于python2</span></span><br><span class="line">$ sudo pip2 install tensorrt-XXX-cp27-cp27mu-linux_x86_64.whl</span><br><span class="line"><span class="comment"># 对于python3</span></span><br><span class="line">$ sudo pip3 install tensorrt-XXX-cp35-cp35m-linux_x86_64.whl</span><br></pre></td></tr></table></figure></p><p><strong>如安装失败请参考文章末尾的解决方案。</strong><br>测试<code>TensorRT</code>是否安装成功，进入Python编辑器加载<code>tensorrt</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import tensorrt</span><br><span class="line">&gt;&gt;&gt; tensorrt.__version__</span><br></pre></td></tr></table></figure></p><p>会输出<code>TensorRT</code>的版本号，即安装成功。<br>然后转到<code>uff</code>目录下安装<code>uff</code>包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于python2</span></span><br><span class="line">$ sudo pip2 install uff-0.1.0rc0-py2.py3-none-any.whl</span><br><span class="line"><span class="comment"># 对于python3</span></span><br><span class="line">$ sudo pip3 install uff-0.1.0rc0-py2.py3-none-any.whl</span><br></pre></td></tr></table></figure></p><p>测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> convert-to-uff</span><br></pre></td></tr></table></figure></p><p>会输出<code>uff</code>的安装路径。<br>拷贝<code>lenet5.uff</code>到<code>python</code>相关目录进行验证：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp TensorRT-XXX/data/mnist/lenet5.uff TensorRT-XXX/python/data/mnist/lenet5.uff</span><br><span class="line">$ <span class="built_in">cd</span> TensorRT-XXX/samples/sampleMNIST</span><br><span class="line">$ make clean</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">cd</span> /TensorRT-XXX/bin（转到bin目录下面，make后的可执行文件在此目录下）</span><br><span class="line">$ ./sample_mnist</span><br></pre></td></tr></table></figure></p><p>命令执行顺利即安装成功。</p><h5 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h5><p>在安装<code>Python</code>的<code>TensorRT</code>包时可能出现的错误：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In file included from src/cpp/cuda.cpp:1:0:</span><br><span class="line">    src/cpp/cuda.hpp:14:18: fatal error: cuda.h: No such file or directory</span><br><span class="line">    compilation terminated.</span><br><span class="line">    error: <span class="built_in">command</span> <span class="string">'x86_64-linux-gnu-gcc'</span> failed with <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure></p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>显示是找不到cuda.h，根据网上分析是因为用了sudo之后环境变量用的是root的环境变量。<br><a href="https://codeyarns.com/2015/07/31/pip-install-error-with-pycuda/" target="_blank" rel="noopener">参考</a></p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>将<code>cuda</code>的安装路径添加到<code>root</code>的环境变量中，在<code>root</code>角色下安装<code>Python</code>的<code>TensorRT</code>包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/profile.d/cuda.sh</span><br><span class="line">添加：<span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-9.0/bin:<span class="variable">$PATH</span></span><br><span class="line">$ sudo su -</span><br><span class="line">$ pip2 install tensorrt-XXX-cp27-cp27mu-linux_x86_64.whl </span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://blog.csdn.net/xll_bit/article/details/78376320" target="_blank" rel="noopener">https://blog.csdn.net/xll_bit/article/details/78376320</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h4&gt;&lt;p&gt;首先下载&lt;code&gt;tar&lt;/code&gt;版本的安装包，&lt;a href=&quot;https://developer.nvidia.com/tensorrt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;需要登陆&lt;code&gt;NVIDIA&lt;/code&gt;。&lt;br&gt;安装&lt;code&gt;TensorRT&lt;/code&gt;前需要安装&lt;code&gt;Cuda&lt;/code&gt;和&lt;code&gt;cudnn&lt;/code&gt;，安装步骤可以参考&lt;a href=&quot;https://http://www.wgshun.top/2018/06/ubuntu-install-cuda-and-cudnn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; ubuntu安装cuda和cudnn&lt;/a&gt;。&lt;br&gt;打开下载的&lt;code&gt;TensorRT&lt;/code&gt;所在路径，解压下载的&lt;code&gt;tar&lt;/code&gt;文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ tar -xzvf TensorRT-XXX.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解压好添加环境变量：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vim ~/.bashrc &lt;span class=&quot;comment&quot;&gt;# 打开环境变量文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将下面三个环境变量写入环境变量文件并保存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; LD_LIBRARY_PATH=TensorRT解压路径/lib:&lt;span class=&quot;variable&quot;&gt;$LD_LIBRARY_PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; CUDA_INSTALL_DIR=/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/cuda-9.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; CUDNN_INSTALL_DIR=/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/cuda-9.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使刚刚修改的环境变量文件生效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="ubuntu" scheme="http://wgshun.github.io/tags/ubuntu/"/>
    
      <category term="cuda" scheme="http://wgshun.github.io/tags/cuda/"/>
    
      <category term="cudnn" scheme="http://wgshun.github.io/tags/cudnn/"/>
    
      <category term="tensorrt" scheme="http://wgshun.github.io/tags/tensorrt/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 系统查询 cuda 和 cudnn 版本号</title>
    <link href="http://wgshun.github.io/2018/06/ubuntu-inquire-cuda-and-cudnn-version/"/>
    <id>http://wgshun.github.io/2018/06/ubuntu-inquire-cuda-and-cudnn-version/</id>
    <published>2018-06-06T07:56:06.000Z</published>
    <updated>2018-10-25T13:13:59.989Z</updated>
    
    <content type="html"><![CDATA[<h5 id="查询-cuda-版本号"><a href="#查询-cuda-版本号" class="headerlink" title="查询 cuda 版本号"></a>查询 cuda 版本号</h5><p>命令行输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/<span class="built_in">local</span>/cuda/version.txt</span><br></pre></td></tr></table></figure></p><p>会输出如下信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; CUDA Version 8.0.61</span><br></pre></td></tr></table></figure></p><p>显示<code>cuda</code>版本号为：<code>8.0.61</code></p><h5 id="查询-cudnn-版本号"><a href="#查询-cudnn-版本号" class="headerlink" title="查询 cudnn 版本号"></a>查询 cudnn 版本号</h5><p>命令行输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/<span class="built_in">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>会输出如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define CUDNN_MAJOR 7</span><br><span class="line">#define CUDNN_MINOR 0</span><br><span class="line">#define CUDNN_PATCHLEVEL 1</span><br><span class="line">--</span><br><span class="line">#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)</span><br><span class="line">#include &quot;driver_types.h&quot;</span><br></pre></td></tr></table></figure></p><p>显示<code>cudnn</code>版本号为：<code>7.0.1</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;查询-cuda-版本号&quot;&gt;&lt;a href=&quot;#查询-cuda-版本号&quot; class=&quot;headerlink&quot; title=&quot;查询 cuda 版本号&quot;&gt;&lt;/a&gt;查询 cuda 版本号&lt;/h5&gt;&lt;p&gt;命令行输入：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/cuda/version.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;会输出如下信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; CUDA Version 8.0.61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;显示&lt;code&gt;cuda&lt;/code&gt;版本号为：&lt;code&gt;8.0.61&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;查询-cudnn-版本号&quot;&gt;&lt;a href=&quot;#查询-cudnn-版本号&quot; class=&quot;headerlink&quot; title=&quot;查询 cudnn 版本号&quot;&gt;&lt;/a&gt;查询 cudnn 版本号&lt;/h5&gt;&lt;p&gt;命令行输入：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="ubuntu" scheme="http://wgshun.github.io/tags/ubuntu/"/>
    
      <category term="cuda" scheme="http://wgshun.github.io/tags/cuda/"/>
    
      <category term="cudnn" scheme="http://wgshun.github.io/tags/cudnn/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 安装 Caffe</title>
    <link href="http://wgshun.github.io/2018/06/ubuntu-install-caffe/"/>
    <id>http://wgshun.github.io/2018/06/ubuntu-install-caffe/</id>
    <published>2018-06-06T06:27:35.000Z</published>
    <updated>2018-10-25T13:19:17.063Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>首先安装各种依赖包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev python-dev libgflags-dev libatlas-base-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line">$ sudo apt-get install --no-install-recommends libboost-all-dev</span><br></pre></td></tr></table></figure></p><p>从<code>github</code>上面拷贝下来<code>caffe</code>项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/BVLC/caffe.git</span><br><span class="line">$ <span class="built_in">cd</span> caffe</span><br></pre></td></tr></table></figure></p><p>安装<code>caffe</code>版的<code>SSD</code>拷贝步骤为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/weiliu89/caffe.git</span><br><span class="line">$ <span class="built_in">cd</span> caffe</span><br><span class="line">$ git checkout ssd</span><br></pre></td></tr></table></figure></p><p>然后将<code>caffe</code>主目录下面的<code>Makefile.config.example</code>拷贝更名为<code>Makefile.config</code>，打开操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp Makefile.config.example Makefile.config</span><br><span class="line">$ gedit Makefile.config</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>将其中的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#USE_CUDNN := 1</span><br><span class="line">#WITH_PYTHON_LAYER := 1</span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include</span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib</span><br></pre></td></tr></table></figure></p><p>分别更改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE_CUDNN := 1</span><br><span class="line">WITH_PYTHON_LAYER := 1</span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial</span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</span><br></pre></td></tr></table></figure></p><p>打开 <code>Makefile</code>文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gedit Makefile</span><br></pre></td></tr></table></figure></p><p>将其中的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVCCFLAGS += -ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS)</span><br></pre></td></tr></table></figure></p><p>更改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)</span><br></pre></td></tr></table></figure></p><p>打开<code>/usr/local/cuda/include/crt/host_config.h</code>文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gedit /usr/<span class="built_in">local</span>/cuda/include/crt/host_config.h</span><br></pre></td></tr></table></figure></p><p>将其中的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#error-- unsupported GNU version! gcc versions later than 4.9 are not supported!</span><br></pre></td></tr></table></figure></p><p>更改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//#error-- unsupported GNU version! gcc versions later than 4.9 are not supported!</span><br></pre></td></tr></table></figure></p><p>下面就是编译<code>caffe</code>并测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ make clean -j8</span><br><span class="line">$ make all -j8 </span><br><span class="line">$ make runtest -j8</span><br></pre></td></tr></table></figure></p><p>最后输出<code>PASS</code>说明测试成功。<br>配置环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>在文件末尾写入<code>caffe-pathon</code>的安装路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PYTHONPATH=caffe安装路径/caffe/python:$PYTHONPATH</span><br></pre></td></tr></table></figure></p><p>上述语句中的<code>~</code>表示caffe所在的根目录。<br>是环境变量生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>然后执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make pycaffe</span><br></pre></td></tr></table></figure></p><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="CUDA9错误"><a href="#CUDA9错误" class="headerlink" title="CUDA9错误"></a>CUDA9错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NVCC src/caffe/layers/bnll_layer.cu</span><br><span class="line">nvcc fatal   : Unsupported gpu architecture <span class="string">'compute_20'</span></span><br><span class="line">Makefile:594: recipe <span class="keyword">for</span> target <span class="string">'.build_release/cuda/src/caffe/layers/bnll_layer.o'</span> failed</span><br><span class="line">make: *** [.build_release/cuda/src/caffe/layers/bnll_layer.o] Error 1</span><br><span class="line">make: *** Waiting <span class="keyword">for</span> unfinished <span class="built_in">jobs</span>....</span><br></pre></td></tr></table></figure><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>cuda9不支持‘ compute-20 ’，需要修改<code>Makefile.config</code>文件中<code>CUDA_ARCH</code>设置，将<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CUDA architecture setting: going with all of them.</span></span><br><span class="line"><span class="comment"># For CUDA &lt; 6.0, comment the *_50 through *_61 lines for compatibility.</span></span><br><span class="line"><span class="comment"># For CUDA &lt; 8.0, comment the *_60 and *_61 lines for compatibility.</span></span><br><span class="line"><span class="comment"># For CUDA &gt;= 9.0, comment the *_20 and *_21 lines for compatibility.</span></span><br><span class="line">CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \</span><br><span class="line">                -gencode arch=compute_20,code=sm_21 \</span><br><span class="line">                -gencode arch=compute_30,code=sm_30 \</span><br><span class="line">                -gencode arch=compute_35,code=sm_35 \</span><br><span class="line">                -gencode arch=compute_50,code=sm_50 \</span><br><span class="line">                -gencode arch=compute_52,code=sm_52 \</span><br><span class="line">                -gencode arch=compute_60,code=sm_60 \</span><br><span class="line">                -gencode arch=compute_61,code=sm_61 \</span><br><span class="line">                -gencode arch=compute_61,code=compute_61</span><br></pre></td></tr></table></figure></p><p>中的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-gencode arch=compute_20,code=sm_20 \</span><br><span class="line">-gencode arch=compute_20,code=sm_21 \</span><br></pre></td></tr></table></figure></p><p>删除即可重新编译。</p><h5 id="HDF5错误"><a href="#HDF5错误" class="headerlink" title="HDF5错误"></a>HDF5错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src/caffe/net.cpp:8:18: fatal error: hdf5.h: No such file or directory</span><br><span class="line">compilation terminated.</span><br><span class="line">Makefile:581: recipe <span class="keyword">for</span> target <span class="string">'.build_release/src/caffe/net.o'</span> failed</span><br><span class="line">make: *** [.build_release/src/caffe/net.o] Error 1</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AR -o .build_release/lib/libcaffe.a</span><br><span class="line">LD -o .build_release/lib/libcaffe.so.1.0.0</span><br><span class="line">/usr/bin/ld: cannot find -lhdf5_hl</span><br><span class="line">/usr/bin/ld: cannot find -lhdf5</span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br><span class="line">Makefile:572: recipe <span class="keyword">for</span> target <span class="string">'.build_release/lib/libcaffe.so.1.0.0'</span> failed</span><br><span class="line">make: *** [.build_release/lib/libcaffe.so.1.0.0] Error 1</span><br></pre></td></tr></table></figure></p><h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><p>执行命令安装<code>libhdf5-dev</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libhdf5-dev</span><br></pre></td></tr></table></figure></p><p>然后再重新编译。</p><h5 id="gflags错误"><a href="#gflags错误" class="headerlink" title="gflags错误"></a>gflags错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In file included from src/caffe/net.cpp:10:0:</span><br><span class="line">./include/caffe/common.hpp:5:27: fatal error: gflags/gflags.h: No such file or directory</span><br><span class="line">compilation terminated.</span><br><span class="line">Makefile:581: recipe <span class="keyword">for</span> target <span class="string">'.build_release/src/caffe/net.o'</span> failed</span><br><span class="line">make: *** [.build_release/src/caffe/net.o] Error 1</span><br></pre></td></tr></table></figure><h5 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h5><p>执行命令安装<code>gflags</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libgflags-dev</span><br></pre></td></tr></table></figure></p><p>然后再重新编译。</p><h5 id="glog错误"><a href="#glog错误" class="headerlink" title="glog错误"></a>glog错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In file included from src/caffe/net.cpp:10:0:</span><br><span class="line">./include/caffe/common.hpp:6:26: fatal error: glog/logging.h: No such file or directory</span><br><span class="line">compilation terminated.</span><br><span class="line">Makefile:581: recipe <span class="keyword">for</span> target <span class="string">'.build_release/src/caffe/net.o'</span> failed</span><br><span class="line">make: *** [.build_release/src/caffe/net.o] Error 1</span><br></pre></td></tr></table></figure><h5 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h5><p>执行命令安装<code>glog</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libgoogle-glog-dev</span><br></pre></td></tr></table></figure></p><p>然后再重新编译。</p><h5 id="LMDB错误"><a href="#LMDB错误" class="headerlink" title="LMDB错误"></a>LMDB错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In file included from src/caffe/util/db.cpp:3:0:</span><br><span class="line">./include/caffe/util/db_lmdb.hpp:8:18: fatal error: lmdb.h: No such file or directory</span><br><span class="line">compilation terminated.</span><br><span class="line">Makefile:581: recipe <span class="keyword">for</span> target <span class="string">'.build_release/src/caffe/util/db.o'</span> failed</span><br><span class="line">make: *** [.build_release/src/caffe/util/db.o] Error 1</span><br></pre></td></tr></table></figure><h5 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h5><p>执行命令安装<code>lmdb</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install liblmdb-dev</span><br></pre></td></tr></table></figure></p><p>然后再重新编译。</p><h5 id="opencv-imgcodecs-opencv-videoio错误"><a href="#opencv-imgcodecs-opencv-videoio错误" class="headerlink" title="opencv_imgcodecs opencv_videoio错误"></a>opencv_imgcodecs opencv_videoio错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: cannot find -lopencv_imgcodecs</span><br><span class="line">/usr/bin/ld: cannot find -lopencv_videoio</span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br><span class="line">Makefile:579: recipe <span class="keyword">for</span> target <span class="string">'.build_release/lib/libcaffe.so.1.0.0-rc5'</span> failed</span><br><span class="line">make: *** [.build_release/lib/libcaffe.so.1.0.0-rc5] Error 1</span><br></pre></td></tr></table></figure><h5 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h5><p>打开<code>Makefile</code>文件，在164行（我的文件）加上<code>opencv_imgcodecs</code>，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LIBRARIES += glog gflags protobuf leveldb snappy \</span><br><span class="line">  lmdb boost_system hdf5_hl hdf5 m \</span><br><span class="line">  opencv_core opencv_highgui opencv_imgproc opencv_imgcodecs</span><br></pre></td></tr></table></figure></p><p>然后再重新编译。</p><h5 id="numpy路径错误"><a href="#numpy路径错误" class="headerlink" title="numpy路径错误"></a>numpy路径错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python/caffe/_caffe.cpp:10:31: fatal error: numpy/arrayobject.h: No such file or</span><br><span class="line">directory</span><br><span class="line">compilation terminated.</span><br><span class="line">make: *** [python/caffe/_caffe.so] Error 1`</span><br></pre></td></tr></table></figure><h5 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h5><p>打开<code>python</code>编辑器，通过命令得到<code>numpy</code>的安装路径：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dirs = numpy.get_include()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(dirs)</span><br></pre></td></tr></table></figure></p><p>然后就能看到<code>numpy</code>的安装路径，打开<code>caffe</code>目录下的<code>Makefile.config</code>文件，将65行（我的文件）的路径：<code>/usr/lib/python2.7/dist-packages/numpy/core/include</code>换成刚刚得到<code>numpy</code>的安装路径，然后重新编译。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h4&gt;&lt;p&gt;首先安装各种依赖包：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev python-dev libgflags-dev libatlas-base-dev libhdf5-serial-dev protobuf-compiler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install --no-install-recommends libboost-all-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;github&lt;/code&gt;上面拷贝下来&lt;code&gt;caffe&lt;/code&gt;项目：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/BVLC/caffe.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; caffe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;caffe&lt;/code&gt;版的&lt;code&gt;SSD&lt;/code&gt;拷贝步骤为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/weiliu89/caffe.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; caffe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout ssd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后将&lt;code&gt;caffe&lt;/code&gt;主目录下面的&lt;code&gt;Makefile.config.example&lt;/code&gt;拷贝更名为&lt;code&gt;Makefile.config&lt;/code&gt;，打开操作：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cp Makefile.config.example Makefile.config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gedit Makefile.config&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="ubuntu" scheme="http://wgshun.github.io/tags/ubuntu/"/>
    
      <category term="caffe" scheme="http://wgshun.github.io/tags/caffe/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 安装 cuda9 和 cudnn7</title>
    <link href="http://wgshun.github.io/2018/06/ubuntu-install-cuda-and-cudnn/"/>
    <id>http://wgshun.github.io/2018/06/ubuntu-install-cuda-and-cudnn/</id>
    <published>2018-06-06T04:20:12.000Z</published>
    <updated>2018-10-25T13:19:52.999Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="安装-cuda"><a href="#安装-cuda" class="headerlink" title="安装 cuda"></a>安装 cuda</h5><p>首先下载 cuda9.0 <a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">下载地址</a>的 (runfile) 安装文件，下载完成进到文件下载的目录下，给安装文件赋予权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod 777 XXX.run <span class="comment"># XXX为安装文件的文件名</span></span><br></pre></td></tr></table></figure></p><p>执行安装文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sh XXX.run</span><br></pre></td></tr></table></figure></p><p>在看完协议选择 <code>Install NVIDIA Accelerated Graphics Driver for nvidia</code> 时，选择 <em>no</em>，其他的可全部选择 <em>yes</em> 和默认回车；并且在查看协议时有快捷键 <code>Ctrl+D</code> 进行翻页。<br>下面安装完成配置环境变量：<br>打开环境变量文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gedit ~/.bashrc</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>在文件末尾加上安装的 cuda9.0 路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-9.0/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-9.0/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure></p><p>配置完环境变量，使其生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>然后进行测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda-9.0/samples/1_Utilities/deviceQuery</span><br><span class="line">$ sudo make</span><br><span class="line">$ sudo ./deviceQuery</span><br></pre></td></tr></table></figure></p><p>测试结果有输出<code>PASS</code>，即为正确安装。</p><h5 id="安装-cudnn"><a href="#安装-cudnn" class="headerlink" title="安装 cudnn"></a>安装 cudnn</h5><p>首先下载 cudnn7 <a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">下载路径</a>（<em>下载 cudnn7 需要登陆 NVIDIA ，没有 NVIDIA 账号的注册一个就行了。</em>）下载 tgz 压缩文件。<br>首先解压 tgz 压缩文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xzvf cudnn-XXX.tgz</span><br></pre></td></tr></table></figure></p><p>接着复制文件到 cuda 路径下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line">$ sudo cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">$ sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure></p><p>复制完成然后使用命令，可以看到输出相应的 cuda 和 cudnn 的版本信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvcc -V</span><br></pre></td></tr></table></figure></p><hr><p>如果提示库缺失错误，可参考以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/cuda-9.0/lib64/libcudart.so.9.0 /usr/<span class="built_in">local</span>/lib/libcudart.so.9.0 &amp;&amp; sudo ldconfig</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/cuda-9.0/lib64/libcublas.so.9.0 /usr/<span class="built_in">local</span>/lib/libcublas.so.9.0 &amp;&amp; sudo ldconfig</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/cuda-9.0/lib64/libcurand.so.9.0 /usr/<span class="built_in">local</span>/lib/libcurabd.so.9.0 &amp;&amp; sudo ldconfig</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/cuda-9.0/lib64/libcudnn.so.7 /usr/<span class="built_in">local</span>/lib/libcudnn.so.7 &amp;&amp; sudo ldconfig</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h4&gt;&lt;h5 id=&quot;安装-cuda&quot;&gt;&lt;a href=&quot;#安装-cuda&quot; class=&quot;headerlink&quot; title=&quot;安装 cuda&quot;&gt;&lt;/a&gt;安装 cuda&lt;/h5&gt;&lt;p&gt;首先下载 cuda9.0 &lt;a href=&quot;https://developer.nvidia.com/cuda-toolkit-archive&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;的 (runfile) 安装文件，下载完成进到文件下载的目录下，给安装文件赋予权限：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo chmod 777 XXX.run &lt;span class=&quot;comment&quot;&gt;# XXX为安装文件的文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行安装文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo sh XXX.run&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在看完协议选择 &lt;code&gt;Install NVIDIA Accelerated Graphics Driver for nvidia&lt;/code&gt; 时，选择 &lt;em&gt;no&lt;/em&gt;，其他的可全部选择 &lt;em&gt;yes&lt;/em&gt; 和默认回车；并且在查看协议时有快捷键 &lt;code&gt;Ctrl+D&lt;/code&gt; 进行翻页。&lt;br&gt;下面安装完成配置环境变量：&lt;br&gt;打开环境变量文件&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gedit ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="ubuntu" scheme="http://wgshun.github.io/tags/ubuntu/"/>
    
      <category term="cuda" scheme="http://wgshun.github.io/tags/cuda/"/>
    
      <category term="cudnn" scheme="http://wgshun.github.io/tags/cudnn/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 安装 NVIDIA 驱动</title>
    <link href="http://wgshun.github.io/2018/06/ubuntu-install-nvidia-drive/"/>
    <id>http://wgshun.github.io/2018/06/ubuntu-install-nvidia-drive/</id>
    <published>2018-06-04T02:31:46.000Z</published>
    <updated>2018-10-25T13:22:20.251Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>   在安装了NVIDIA驱动后出现了进入Ubuntu循环登录的问题。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>1.进入命令行界面<br><code>Ctrl+Alt+F1</code><br>打开编辑配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure></p><p>在最后一行添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau</span><br></pre></td></tr></table></figure></p><p>2.禁用 nouveau 第三方驱动，之后也不需要改回来<br>执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo update-initramfs -u</span><br><span class="line">$ lsmod | grep nouveau</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>没有输出即屏蔽好了。</p><p>3.禁用X服务，执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/lightdm stop</span><br></pre></td></tr></table></figure></p><p>4.给驱动run文件赋予执行权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod a+x NVIDIA***.run</span><br></pre></td></tr></table></figure></p><p>安装(注意 参数)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./NVIDIA***.run –no-opengl-files</span><br></pre></td></tr></table></figure></p><p>5.启用X服务，执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/lightdm stop</span><br></pre></td></tr></table></figure></p><p>如果还无法进入桌面，这是因为驱动修改了xorg的配置，可执行一下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/share/X11/xorg.conf.d/ </span><br><span class="line">$ sudo mv nvidia-drm-outputclass.conf nvidia-drm-outputclass.conf.bak</span><br></pre></td></tr></table></figure></p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://blog.csdn.net/u012759136/article/details/53355781" target="_blank" rel="noopener">http://blog.csdn.net/u012759136/article/details/53355781</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h5&gt;&lt;p&gt;   在安装了NVIDIA驱动后出现了进入Ubuntu循环登录的问题。&lt;/p&gt;
&lt;h5 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h5&gt;&lt;p&gt;1.进入命令行界面&lt;br&gt;&lt;code&gt;Ctrl+Alt+F1&lt;/code&gt;&lt;br&gt;打开编辑配置文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vim /etc/modprobe.d/blacklist.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在最后一行添加：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;blacklist nouveau&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.禁用 nouveau 第三方驱动，之后也不需要改回来&lt;br&gt;执行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo update-initramfs -u&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ lsmod | grep nouveau&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="ubuntu" scheme="http://wgshun.github.io/tags/ubuntu/"/>
    
      <category term="nvidia驱动" scheme="http://wgshun.github.io/tags/nvidia%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 python2 安装 OpenCV2.4.13.6</title>
    <link href="http://wgshun.github.io/2018/06/ubuntu-install-opencv/"/>
    <id>http://wgshun.github.io/2018/06/ubuntu-install-opencv/</id>
    <published>2018-06-04T02:31:46.000Z</published>
    <updated>2019-01-16T13:17:51.996Z</updated>
    
    <content type="html"><![CDATA[<p>事先装有 OpenCV 需要重新安装的，先执行卸载步骤，再安装。</p><h4 id="卸载步骤"><a href="#卸载步骤" class="headerlink" title="卸载步骤"></a>卸载步骤</h4><p>1.找到当初安装 OpenCV 的 release 或 build 目录，执行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo make uninstall</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">sudo rm -r build</span><br><span class="line">sudo rm -r /usr/<span class="built_in">local</span>/include/opencv2 /usr/<span class="built_in">local</span>/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/<span class="built_in">local</span>/share/opencv /usr/<span class="built_in">local</span>/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/<span class="built_in">local</span>/bin/opencv* /usr/<span class="built_in">local</span>/lib/libopencv*</span><br></pre></td></tr></table></figure></p><p>2.删除 usr 文件夹中所有 opencv 相关项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/</span><br><span class="line">find . -name <span class="string">"*opencv*"</span> | xargs sudo rm -rf</span><br></pre></td></tr></table></figure></p><p>3.移除 Python 相关<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove opencv-doc opencv-data python-opencv</span><br></pre></td></tr></table></figure></p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>1.通过命令安装各种软件包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install build-essential</span><br><span class="line">$ sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">$ sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br></pre></td></tr></table></figure></p><p>2.进到安装路径下拷贝 OpenCV 源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br></pre></td></tr></table></figure></p><p>3.选择安装的 OpenCV 版本号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> opencv</span><br><span class="line">$ git checkout -b 2.4 origin/2.4</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>4.使用 Cmake 编译 OpenCV 源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir release</span><br><span class="line">$ <span class="built_in">cd</span> release</span><br><span class="line">$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> ..</span><br></pre></td></tr></table></figure></p><p>5.make 安装 OpenCV<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make -j4</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></p><p>安装到此结束。</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>命令进入 Python 编辑器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cv2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(cv2.__version__)</span><br></pre></td></tr></table></figure></p><p>会输出 OpenCV 的版本号。</p><h4 id="cuda-9-0-与-opencv-版本匹配问题："><a href="#cuda-9-0-与-opencv-版本匹配问题：" class="headerlink" title="cuda 9.0 与 opencv 版本匹配问题："></a>cuda 9.0 与 opencv 版本匹配问题：</h4><p>Cmake 过程中会出现以下问题：</p><h5 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMake Error: The following variables are used <span class="keyword">in</span> this project, but they are <span class="built_in">set</span> to NOTFOUND.</span><br><span class="line">Please <span class="built_in">set</span> them or make sure they are <span class="built_in">set</span> and tested correctly <span class="keyword">in</span> the CMake files:</span><br><span class="line">CUDA_nppi_LIBRARY (ADVANCED)</span><br></pre></td></tr></table></figure><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>在cuda9里面，NVIDIA把 <code>libnppi.so</code>换成<code>libnppc.solibnppial.solibnppicc.solibnppicom.solibnppidei.solibnppif.solibnppig.solibnppim.solibnppist.solibnppisu.solibnppitc.solibnpps.so</code></p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>修改opencv/cmake/FindCUDA.cmake 文件，将其中的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span>(CUDA_nppi_LIBRARY CACHE)</span><br></pre></td></tr></table></figure></p><p>替换为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span>(CUDA_nppial_LIBRARY CACHE)</span><br><span class="line"><span class="built_in">unset</span>(CUDA_nppicc_LIBRARY CACHE)</span><br><span class="line"><span class="built_in">unset</span>(CUDA_nppicom_LIBRARY CACHE)</span><br><span class="line"><span class="built_in">unset</span>(CUDA_nppidei_LIBRARY CACHE)</span><br><span class="line"><span class="built_in">unset</span>(CUDA_nppif_LIBRARY CACHE)</span><br><span class="line"><span class="built_in">unset</span>(CUDA_nppig_LIBRARY CACHE)</span><br><span class="line"><span class="built_in">unset</span>(CUDA_nppim_LIBRARY CACHE)</span><br><span class="line"><span class="built_in">unset</span>(CUDA_nppist_LIBRARY CACHE)</span><br><span class="line"><span class="built_in">unset</span>(CUDA_nppisu_LIBRARY CACHE)</span><br><span class="line"><span class="built_in">unset</span>(CUDA_nppitc_LIBRARY CACHE)</span><br></pre></td></tr></table></figure></p><p>将<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_cuda_helper_libs(nppi)</span><br><span class="line"><span class="built_in">set</span>(CUDA_npp_LIBRARY<span class="string">"<span class="variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppi_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_npps_LIBRARY&#125;</span>"</span>)</span><br></pre></td></tr></table></figure></p><p>替换为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">find_cuda_helper_libs(nppial)</span><br><span class="line">find_cuda_helper_libs(nppicc)</span><br><span class="line">find_cuda_helper_libs(nppicom)</span><br><span class="line">find_cuda_helper_libs(nppidei)</span><br><span class="line">find_cuda_helper_libs(nppif)</span><br><span class="line">find_cuda_helper_libs(nppig)</span><br><span class="line">find_cuda_helper_libs(nppim)</span><br><span class="line">find_cuda_helper_libs(nppist)</span><br><span class="line">find_cuda_helper_libs(nppisu)</span><br><span class="line">find_cuda_helper_libs(nppitc)</span><br><span class="line"><span class="built_in">set</span>(CUDA_npp_LIBRARY <span class="string">"<span class="variable">$&#123;CUDA_nppc_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppial_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppicc_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppicom_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppidei_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppif_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppig_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppim_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppist_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppisu_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_nppitc_LIBRARY&#125;</span>;<span class="variable">$&#123;CUDA_npps_LIBRARY&#125;</span>"</span>)</span><br></pre></td></tr></table></figure></p><h5 id="错误-1"><a href="#错误-1" class="headerlink" title="错误"></a>错误</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opencv nvcc fatal   : Unsupported gpu architecture <span class="string">'compute_20'</span></span><br></pre></td></tr></table></figure><h5 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h5><p>cuda9不支持‘ compute-20 ’</p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><p>更改 OpenCVDetectCUDA.cmake 文件，把有关 ‘ compute-20 ’ 的全删掉<br>将<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(CUDA_GENERATION STREQUAL <span class="string">"Fermi"</span>)</span><br><span class="line">    <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"3.0 3.5"</span>)</span><br><span class="line">  elseif(CUDA_GENERATION STREQUAL <span class="string">"Kepler"</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$&#123;CUDA_VERSION&#125;</span> VERSION_LESS <span class="string">"5.0"</span>)</span><br><span class="line">      <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"2.0 2.1"</span>)</span><br><span class="line">    <span class="keyword">else</span>()</span><br><span class="line">      <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"3.0 3.5"</span>)</span><br></pre></td></tr></table></figure></p><p>替换为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(CUDA_GENERATION STREQUAL <span class="string">"Fermi"</span>)</span><br><span class="line">    <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"3.0 3.5"</span>)</span><br><span class="line">  elseif(CUDA_GENERATION STREQUAL <span class="string">"Kepler"</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$&#123;CUDA_VERSION&#125;</span> VERSION_LESS <span class="string">"5.0"</span>)</span><br><span class="line">      <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"3.0"</span>)</span><br><span class="line">    <span class="keyword">else</span>()</span><br><span class="line">      <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"3.0 3.5"</span>)</span><br></pre></td></tr></table></figure></p><p>将：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;CUDA_VERSION&#125;</span> VERSION_LESS <span class="string">"5.0"</span>)</span><br><span class="line">     <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"1.1 1.2 1.3 2.0 2.1(2.0) 3.0"</span>)</span><br><span class="line">elseif(<span class="variable">$&#123;CUDA_VERSION&#125;</span> VERSION_GREATER <span class="string">"6.5"</span>)</span><br><span class="line">     <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"2.0 2.1(2.0) 3.0 3.5"</span>)</span><br></pre></td></tr></table></figure></p><p>替换为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;CUDA_VERSION&#125;</span> VERSION_LESS <span class="string">"5.0"</span>)</span><br><span class="line">        <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"1.1 1.2 1.3 2.0 2.1(2.0) 3.0"</span>)</span><br><span class="line">elseif(<span class="variable">$&#123;CUDA_VERSION&#125;</span> VERSION_GREATER <span class="string">"6.5"</span>)</span><br><span class="line">        <span class="built_in">set</span>(__cuda_arch_bin <span class="string">"3.0 3.5"</span>)</span><br></pre></td></tr></table></figure></p><p>然后 cmake 成功。</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html" target="_blank" rel="noopener">https://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html</a></p><p><a href="https://stackoverflow.com/questions/46584000/cmake-error-variables-are-set-to-notfound" target="_blank" rel="noopener">https://stackoverflow.com/questions/46584000/cmake-error-variables-are-set-to-notfound</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事先装有 OpenCV 需要重新安装的，先执行卸载步骤，再安装。&lt;/p&gt;
&lt;h4 id=&quot;卸载步骤&quot;&gt;&lt;a href=&quot;#卸载步骤&quot; class=&quot;headerlink&quot; title=&quot;卸载步骤&quot;&gt;&lt;/a&gt;卸载步骤&lt;/h4&gt;&lt;p&gt;1.找到当初安装 OpenCV 的 release 或 build 目录，执行以下命令&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo make uninstall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rm -r build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rm -r /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/include/opencv2 /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/share/opencv /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/opencv* /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/lib/libopencv*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.删除 usr 文件夹中所有 opencv 相关项&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /usr/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find . -name &lt;span class=&quot;string&quot;&gt;&quot;*opencv*&quot;&lt;/span&gt; | xargs sudo rm -rf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.移除 Python 相关&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get remove opencv-doc opencv-data python-opencv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h4&gt;&lt;p&gt;1.通过命令安装各种软件包&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install build-essential&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.进到安装路径下拷贝 OpenCV 源码&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/opencv/opencv.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.选择安装的 OpenCV 版本号&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; opencv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout -b 2.4 origin/2.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://wgshun.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="ubuntu" scheme="http://wgshun.github.io/tags/ubuntu/"/>
    
      <category term="cuda" scheme="http://wgshun.github.io/tags/cuda/"/>
    
      <category term="OpenCV" scheme="http://wgshun.github.io/tags/OpenCV/"/>
    
  </entry>
  
</feed>
